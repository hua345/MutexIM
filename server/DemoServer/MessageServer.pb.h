// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageServer.proto

#ifndef PROTOBUF_MessageServer_2eproto__INCLUDED
#define PROTOBUF_MessageServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace IMServer {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_MessageServer_2eproto();
void protobuf_AssignDesc_MessageServer_2eproto();
void protobuf_ShutdownFile_MessageServer_2eproto();

class serverGroupMsg;

// ===================================================================

class serverGroupMsg : public ::google::protobuf::Message {
 public:
  serverGroupMsg();
  virtual ~serverGroupMsg();

  serverGroupMsg(const serverGroupMsg& from);

  inline serverGroupMsg& operator=(const serverGroupMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const serverGroupMsg& default_instance();

  void Swap(serverGroupMsg* other);

  // implements Message ----------------------------------------------

  inline serverGroupMsg* New() const { return New(NULL); }

  serverGroupMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const serverGroupMsg& from);
  void MergeFrom(const serverGroupMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(serverGroupMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string userId = 1;
  inline int userid_size() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& userid(int index) const;
  inline ::std::string* mutable_userid(int index);
  inline void set_userid(int index, const ::std::string& value);
  inline void set_userid(int index, const char* value);
  inline void set_userid(int index, const char* value, size_t size);
  inline ::std::string* add_userid();
  inline void add_userid(const ::std::string& value);
  inline void add_userid(const char* value);
  inline void add_userid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& userid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_userid();

  // optional bytes msgData = 2;
  inline void clear_msgdata();
  static const int kMsgDataFieldNumber = 2;
  inline const ::std::string& msgdata() const;
  inline void set_msgdata(const ::std::string& value);
  inline void set_msgdata(const char* value);
  inline void set_msgdata(const void* value, size_t size);
  inline ::std::string* mutable_msgdata();
  inline ::std::string* release_msgdata();
  inline void set_allocated_msgdata(::std::string* msgdata);

  // @@protoc_insertion_point(class_scope:IMServer.serverGroupMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> userid_;
  ::google::protobuf::internal::ArenaStringPtr msgdata_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageServer_2eproto();
  friend void protobuf_AssignDesc_MessageServer_2eproto();
  friend void protobuf_ShutdownFile_MessageServer_2eproto();

  void InitAsDefaultInstance();
  static serverGroupMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// serverGroupMsg

// repeated string userId = 1;
inline int serverGroupMsg::userid_size() const {
  return userid_.size();
}
inline void serverGroupMsg::clear_userid() {
  userid_.Clear();
}
inline const ::std::string& serverGroupMsg::userid(int index) const {
  // @@protoc_insertion_point(field_get:IMServer.serverGroupMsg.userId)
  return userid_.Get(index);
}
inline ::std::string* serverGroupMsg::mutable_userid(int index) {
  // @@protoc_insertion_point(field_mutable:IMServer.serverGroupMsg.userId)
  return userid_.Mutable(index);
}
inline void serverGroupMsg::set_userid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IMServer.serverGroupMsg.userId)
  userid_.Mutable(index)->assign(value);
}
inline void serverGroupMsg::set_userid(int index, const char* value) {
  userid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IMServer.serverGroupMsg.userId)
}
inline void serverGroupMsg::set_userid(int index, const char* value, size_t size) {
  userid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IMServer.serverGroupMsg.userId)
}
inline ::std::string* serverGroupMsg::add_userid() {
  return userid_.Add();
}
inline void serverGroupMsg::add_userid(const ::std::string& value) {
  userid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IMServer.serverGroupMsg.userId)
}
inline void serverGroupMsg::add_userid(const char* value) {
  userid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IMServer.serverGroupMsg.userId)
}
inline void serverGroupMsg::add_userid(const char* value, size_t size) {
  userid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IMServer.serverGroupMsg.userId)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
serverGroupMsg::userid() const {
  // @@protoc_insertion_point(field_list:IMServer.serverGroupMsg.userId)
  return userid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
serverGroupMsg::mutable_userid() {
  // @@protoc_insertion_point(field_mutable_list:IMServer.serverGroupMsg.userId)
  return &userid_;
}

// optional bytes msgData = 2;
inline void serverGroupMsg::clear_msgdata() {
  msgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& serverGroupMsg::msgdata() const {
  // @@protoc_insertion_point(field_get:IMServer.serverGroupMsg.msgData)
  return msgdata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void serverGroupMsg::set_msgdata(const ::std::string& value) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMServer.serverGroupMsg.msgData)
}
inline void serverGroupMsg::set_msgdata(const char* value) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMServer.serverGroupMsg.msgData)
}
inline void serverGroupMsg::set_msgdata(const void* value, size_t size) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMServer.serverGroupMsg.msgData)
}
inline ::std::string* serverGroupMsg::mutable_msgdata() {
  
  // @@protoc_insertion_point(field_mutable:IMServer.serverGroupMsg.msgData)
  return msgdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* serverGroupMsg::release_msgdata() {
  
  return msgdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void serverGroupMsg::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata != NULL) {
    
  } else {
    
  }
  msgdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgdata);
  // @@protoc_insertion_point(field_set_allocated:IMServer.serverGroupMsg.msgData)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace IMServer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageServer_2eproto__INCLUDED
