// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageChat.proto
#include "stdafx.h"
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageChat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace IMChat {

namespace {

const ::google::protobuf::Descriptor* shakeHandleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  shakeHandleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* shakeHandleRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  shakeHandleRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgData_MSGTYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UnreadMsgRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnreadMsgRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnreadMsgResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnreadMsgResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeerOnlineNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeerOnlineNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeerStatusNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeerStatusNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeerUserInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeerUserInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeerUserInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeerUserInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeerAllUserInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeerAllUserInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeerAllUserInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeerAllUserInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeerCategoryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeerCategoryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeerCategoryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeerCategoryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeerCategoryResponse_idCategory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeerCategoryResponse_idCategory_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupAllRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupAllRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupAllResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupAllResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupMembeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupMembeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupMemberResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupMemberResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageChat_2eproto() {
  protobuf_AddDesc_MessageChat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageChat.proto");
  GOOGLE_CHECK(file != NULL);
  shakeHandleReq_descriptor_ = file->message_type(0);
  static const int shakeHandleReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shakeHandleReq, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shakeHandleReq, userid_),
  };
  shakeHandleReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      shakeHandleReq_descriptor_,
      shakeHandleReq::default_instance_,
      shakeHandleReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(shakeHandleReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shakeHandleReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shakeHandleReq, _is_default_instance_));
  shakeHandleRes_descriptor_ = file->message_type(1);
  static const int shakeHandleRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shakeHandleRes, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shakeHandleRes, result_),
  };
  shakeHandleRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      shakeHandleRes_descriptor_,
      shakeHandleRes::default_instance_,
      shakeHandleRes_offsets_,
      -1,
      -1,
      -1,
      sizeof(shakeHandleRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shakeHandleRes, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shakeHandleRes, _is_default_instance_));
  UserData_descriptor_ = file->message_type(2);
  static const int UserData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, online_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, image_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, sex_),
  };
  UserData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserData_descriptor_,
      UserData::default_instance_,
      UserData_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserData, _is_default_instance_));
  MsgData_descriptor_ = file->message_type(3);
  static const int MsgData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgData, sequencenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgData, fromid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgData, toid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgData, msgdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgData, type_),
  };
  MsgData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgData_descriptor_,
      MsgData::default_instance_,
      MsgData_offsets_,
      -1,
      -1,
      -1,
      sizeof(MsgData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgData, _is_default_instance_));
  MsgData_MSGTYPE_descriptor_ = MsgData_descriptor_->enum_type(0);
  UnreadMsgRequest_descriptor_ = file->message_type(4);
  static const int UnreadMsgRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadMsgRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadMsgRequest, timestamp_),
  };
  UnreadMsgRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UnreadMsgRequest_descriptor_,
      UnreadMsgRequest::default_instance_,
      UnreadMsgRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(UnreadMsgRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadMsgRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadMsgRequest, _is_default_instance_));
  UnreadMsgResponse_descriptor_ = file->message_type(5);
  static const int UnreadMsgResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadMsgResponse, msgcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadMsgResponse, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadMsgResponse, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadMsgResponse, msgdata_),
  };
  UnreadMsgResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UnreadMsgResponse_descriptor_,
      UnreadMsgResponse::default_instance_,
      UnreadMsgResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(UnreadMsgResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadMsgResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnreadMsgResponse, _is_default_instance_));
  PeerOnlineNotify_descriptor_ = file->message_type(6);
  static const int PeerOnlineNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerOnlineNotify, onlinecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerOnlineNotify, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerOnlineNotify, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerOnlineNotify, msgdata_),
  };
  PeerOnlineNotify_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PeerOnlineNotify_descriptor_,
      PeerOnlineNotify::default_instance_,
      PeerOnlineNotify_offsets_,
      -1,
      -1,
      -1,
      sizeof(PeerOnlineNotify),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerOnlineNotify, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerOnlineNotify, _is_default_instance_));
  PeerStatusNotify_descriptor_ = file->message_type(7);
  static const int PeerStatusNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerStatusNotify, statuscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerStatusNotify, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerStatusNotify, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerStatusNotify, msgdata_),
  };
  PeerStatusNotify_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PeerStatusNotify_descriptor_,
      PeerStatusNotify::default_instance_,
      PeerStatusNotify_offsets_,
      -1,
      -1,
      -1,
      sizeof(PeerStatusNotify),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerStatusNotify, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerStatusNotify, _is_default_instance_));
  PeerUserInfoRequest_descriptor_ = file->message_type(8);
  static const int PeerUserInfoRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerUserInfoRequest, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerUserInfoRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerUserInfoRequest, requestid_),
  };
  PeerUserInfoRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PeerUserInfoRequest_descriptor_,
      PeerUserInfoRequest::default_instance_,
      PeerUserInfoRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(PeerUserInfoRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerUserInfoRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerUserInfoRequest, _is_default_instance_));
  PeerUserInfoResponse_descriptor_ = file->message_type(9);
  static const int PeerUserInfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerUserInfoResponse, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerUserInfoResponse, userinfo_),
  };
  PeerUserInfoResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PeerUserInfoResponse_descriptor_,
      PeerUserInfoResponse::default_instance_,
      PeerUserInfoResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(PeerUserInfoResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerUserInfoResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerUserInfoResponse, _is_default_instance_));
  PeerAllUserInfoRequest_descriptor_ = file->message_type(10);
  static const int PeerAllUserInfoRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerAllUserInfoRequest, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerAllUserInfoRequest, userid_),
  };
  PeerAllUserInfoRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PeerAllUserInfoRequest_descriptor_,
      PeerAllUserInfoRequest::default_instance_,
      PeerAllUserInfoRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(PeerAllUserInfoRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerAllUserInfoRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerAllUserInfoRequest, _is_default_instance_));
  PeerAllUserInfoResponse_descriptor_ = file->message_type(11);
  static const int PeerAllUserInfoResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerAllUserInfoResponse, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerAllUserInfoResponse, friendscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerAllUserInfoResponse, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerAllUserInfoResponse, msgdata_),
  };
  PeerAllUserInfoResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PeerAllUserInfoResponse_descriptor_,
      PeerAllUserInfoResponse::default_instance_,
      PeerAllUserInfoResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(PeerAllUserInfoResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerAllUserInfoResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerAllUserInfoResponse, _is_default_instance_));
  PeerCategoryRequest_descriptor_ = file->message_type(12);
  static const int PeerCategoryRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCategoryRequest, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCategoryRequest, userid_),
  };
  PeerCategoryRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PeerCategoryRequest_descriptor_,
      PeerCategoryRequest::default_instance_,
      PeerCategoryRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(PeerCategoryRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCategoryRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCategoryRequest, _is_default_instance_));
  PeerCategoryResponse_descriptor_ = file->message_type(13);
  static const int PeerCategoryResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCategoryResponse, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCategoryResponse, categorycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCategoryResponse, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCategoryResponse, msgdata_),
  };
  PeerCategoryResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PeerCategoryResponse_descriptor_,
      PeerCategoryResponse::default_instance_,
      PeerCategoryResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(PeerCategoryResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCategoryResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCategoryResponse, _is_default_instance_));
  PeerCategoryResponse_idCategory_descriptor_ = PeerCategoryResponse_descriptor_->nested_type(0);
  static const int PeerCategoryResponse_idCategory_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCategoryResponse_idCategory, categoryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCategoryResponse_idCategory, friendid_),
  };
  PeerCategoryResponse_idCategory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PeerCategoryResponse_idCategory_descriptor_,
      PeerCategoryResponse_idCategory::default_instance_,
      PeerCategoryResponse_idCategory_offsets_,
      -1,
      -1,
      -1,
      sizeof(PeerCategoryResponse_idCategory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCategoryResponse_idCategory, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeerCategoryResponse_idCategory, _is_default_instance_));
  GroupAllRequest_descriptor_ = file->message_type(14);
  static const int GroupAllRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAllRequest, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAllRequest, userid_),
  };
  GroupAllRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GroupAllRequest_descriptor_,
      GroupAllRequest::default_instance_,
      GroupAllRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GroupAllRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAllRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAllRequest, _is_default_instance_));
  GroupInfo_descriptor_ = file->message_type(15);
  static const int GroupInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, groupname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, image_url_),
  };
  GroupInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GroupInfo_descriptor_,
      GroupInfo::default_instance_,
      GroupInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(GroupInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, _is_default_instance_));
  GroupAllResponse_descriptor_ = file->message_type(16);
  static const int GroupAllResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAllResponse, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAllResponse, groupcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAllResponse, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAllResponse, msgdata_),
  };
  GroupAllResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GroupAllResponse_descriptor_,
      GroupAllResponse::default_instance_,
      GroupAllResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GroupAllResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAllResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupAllResponse, _is_default_instance_));
  GroupMemberInfo_descriptor_ = file->message_type(17);
  static const int GroupMemberInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMemberInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMemberInfo, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMemberInfo, image_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMemberInfo, online_status_),
  };
  GroupMemberInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GroupMemberInfo_descriptor_,
      GroupMemberInfo::default_instance_,
      GroupMemberInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(GroupMemberInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMemberInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMemberInfo, _is_default_instance_));
  GroupMembeRequest_descriptor_ = file->message_type(18);
  static const int GroupMembeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMembeRequest, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMembeRequest, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMembeRequest, userid_),
  };
  GroupMembeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GroupMembeRequest_descriptor_,
      GroupMembeRequest::default_instance_,
      GroupMembeRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(GroupMembeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMembeRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMembeRequest, _is_default_instance_));
  GroupMemberResponse_descriptor_ = file->message_type(19);
  static const int GroupMemberResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMemberResponse, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMemberResponse, membercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMemberResponse, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMemberResponse, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMemberResponse, msgdata_),
  };
  GroupMemberResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GroupMemberResponse_descriptor_,
      GroupMemberResponse::default_instance_,
      GroupMemberResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(GroupMemberResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMemberResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupMemberResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageChat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      shakeHandleReq_descriptor_, &shakeHandleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      shakeHandleRes_descriptor_, &shakeHandleRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserData_descriptor_, &UserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgData_descriptor_, &MsgData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UnreadMsgRequest_descriptor_, &UnreadMsgRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UnreadMsgResponse_descriptor_, &UnreadMsgResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PeerOnlineNotify_descriptor_, &PeerOnlineNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PeerStatusNotify_descriptor_, &PeerStatusNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PeerUserInfoRequest_descriptor_, &PeerUserInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PeerUserInfoResponse_descriptor_, &PeerUserInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PeerAllUserInfoRequest_descriptor_, &PeerAllUserInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PeerAllUserInfoResponse_descriptor_, &PeerAllUserInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PeerCategoryRequest_descriptor_, &PeerCategoryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PeerCategoryResponse_descriptor_, &PeerCategoryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PeerCategoryResponse_idCategory_descriptor_, &PeerCategoryResponse_idCategory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GroupAllRequest_descriptor_, &GroupAllRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GroupInfo_descriptor_, &GroupInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GroupAllResponse_descriptor_, &GroupAllResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GroupMemberInfo_descriptor_, &GroupMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GroupMembeRequest_descriptor_, &GroupMembeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GroupMemberResponse_descriptor_, &GroupMemberResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageChat_2eproto() {
  delete shakeHandleReq::default_instance_;
  delete shakeHandleReq_reflection_;
  delete shakeHandleRes::default_instance_;
  delete shakeHandleRes_reflection_;
  delete UserData::default_instance_;
  delete UserData_reflection_;
  delete MsgData::default_instance_;
  delete MsgData_reflection_;
  delete UnreadMsgRequest::default_instance_;
  delete UnreadMsgRequest_reflection_;
  delete UnreadMsgResponse::default_instance_;
  delete UnreadMsgResponse_reflection_;
  delete PeerOnlineNotify::default_instance_;
  delete PeerOnlineNotify_reflection_;
  delete PeerStatusNotify::default_instance_;
  delete PeerStatusNotify_reflection_;
  delete PeerUserInfoRequest::default_instance_;
  delete PeerUserInfoRequest_reflection_;
  delete PeerUserInfoResponse::default_instance_;
  delete PeerUserInfoResponse_reflection_;
  delete PeerAllUserInfoRequest::default_instance_;
  delete PeerAllUserInfoRequest_reflection_;
  delete PeerAllUserInfoResponse::default_instance_;
  delete PeerAllUserInfoResponse_reflection_;
  delete PeerCategoryRequest::default_instance_;
  delete PeerCategoryRequest_reflection_;
  delete PeerCategoryResponse::default_instance_;
  delete PeerCategoryResponse_reflection_;
  delete PeerCategoryResponse_idCategory::default_instance_;
  delete PeerCategoryResponse_idCategory_reflection_;
  delete GroupAllRequest::default_instance_;
  delete GroupAllRequest_reflection_;
  delete GroupInfo::default_instance_;
  delete GroupInfo_reflection_;
  delete GroupAllResponse::default_instance_;
  delete GroupAllResponse_reflection_;
  delete GroupMemberInfo::default_instance_;
  delete GroupMemberInfo_reflection_;
  delete GroupMembeRequest::default_instance_;
  delete GroupMembeRequest_reflection_;
  delete GroupMemberResponse::default_instance_;
  delete GroupMemberResponse_reflection_;
}

void protobuf_AddDesc_MessageChat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021MessageChat.proto\022\006IMChat\"3\n\016shakeHand"
    "leReq\022\021\n\ttimestamp\030\001 \001(\003\022\016\n\006userID\030\002 \001(\t"
    "\"3\n\016shakeHandleRes\022\021\n\ttimestamp\030\001 \001(\003\022\016\n"
    "\006result\030\002 \001(\021\"\247\001\n\010UserData\022\025\n\ronline_sta"
    "tus\030\001 \001(\021\022\021\n\ttimestamp\030\002 \001(\003\022\017\n\007user_id\030"
    "\003 \001(\t\022\014\n\004name\030\004 \001(\t\022\021\n\tnick_name\030\005 \001(\t\022\021"
    "\n\timage_url\030\006 \001(\t\022\020\n\010position\030\007 \001(\t\022\r\n\005e"
    "mail\030\010 \001(\t\022\013\n\003sex\030\t \001(\021\"\335\001\n\007MsgData\022\021\n\tt"
    "imestamp\030\001 \001(\003\022\026\n\016SequenceNumber\030\002 \001(\007\022\016"
    "\n\006fromId\030\003 \001(\t\022\014\n\004toID\030\004 \001(\t\022\017\n\007msgData\030"
    "\005 \001(\014\022%\n\004type\030\006 \001(\0162\027.IMChat.MsgData.MSG"
    "TYPE\"Q\n\007MSGTYPE\022\r\n\tCHAT_TEXT\020\000\022\016\n\nCHAT_A"
    "UDIO\020\001\022\022\n\016GROUPCHAT_TEXT\020\002\022\023\n\017GROUPCHAT_"
    "AUDIO\020\003\"5\n\020UnreadMsgRequest\022\016\n\006userId\030\001 "
    "\001(\t\022\021\n\ttimestamp\030\002 \001(\003\"Y\n\021UnreadMsgRespo"
    "nse\022\020\n\010msgCount\030\001 \001(\005\022\021\n\ttimestamp\030\002 \001(\003"
    "\022\016\n\006userID\030\003 \001(\t\022\017\n\007msgData\030\004 \003(\014\"[\n\020Pee"
    "rOnlineNotify\022\023\n\013onlineCount\030\001 \001(\005\022\021\n\tti"
    "mestamp\030\002 \001(\003\022\016\n\006userID\030\003 \001(\t\022\017\n\007msgData"
    "\030\004 \003(\t\"[\n\020PeerStatusNotify\022\023\n\013statusCoun"
    "t\030\001 \001(\007\022\021\n\ttimestamp\030\002 \001(\003\022\016\n\006userID\030\003 \001"
    "(\t\022\017\n\007msgData\030\004 \003(\t\"K\n\023PeerUserInfoReque"
    "st\022\021\n\ttimestamp\030\001 \001(\003\022\016\n\006userID\030\002 \001(\t\022\021\n"
    "\trequestID\030\003 \001(\t\"M\n\024PeerUserInfoResponse"
    "\022\021\n\ttimestamp\030\001 \001(\003\022\"\n\010userInfo\030\002 \001(\0132\020."
    "IMChat.UserData\";\n\026PeerAllUserInfoReques"
    "t\022\021\n\ttimestamp\030\001 \001(\003\022\016\n\006userID\030\002 \001(\t\"u\n\027"
    "PeerAllUserInfoResponse\022\021\n\ttimestamp\030\001 \001"
    "(\003\022\024\n\014friendsCount\030\002 \001(\005\022\016\n\006userID\030\003 \001(\t"
    "\022!\n\007msgData\030\004 \003(\0132\020.IMChat.UserData\"8\n\023P"
    "eerCategoryRequest\022\021\n\ttimestamp\030\001 \001(\003\022\016\n"
    "\006userID\030\002 \001(\t\"\276\001\n\024PeerCategoryResponse\022\021"
    "\n\ttimestamp\030\001 \001(\003\022\025\n\rcategoryCount\030\002 \001(\005"
    "\022\016\n\006userID\030\003 \001(\t\0228\n\007msgData\030\004 \003(\0132\'.IMCh"
    "at.PeerCategoryResponse.idCategory\0322\n\nid"
    "Category\022\022\n\ncategoryId\030\001 \001(\t\022\020\n\010friendID"
    "\030\002 \001(\t\"4\n\017GroupAllRequest\022\021\n\ttimestamp\030\001"
    " \001(\003\022\016\n\006userID\030\002 \001(\t\"B\n\tGroupInfo\022\017\n\007gro"
    "upID\030\002 \001(\t\022\021\n\tgroupName\030\003 \001(\t\022\021\n\timage_u"
    "rl\030\004 \001(\t\"m\n\020GroupAllResponse\022\021\n\ttimestam"
    "p\030\001 \001(\003\022\022\n\ngroupCount\030\002 \001(\005\022\016\n\006userID\030\003 "
    "\001(\t\022\"\n\007msgData\030\004 \003(\0132\021.IMChat.GroupInfo\""
    "^\n\017GroupMemberInfo\022\016\n\006userID\030\002 \001(\t\022\021\n\tni"
    "ck_name\030\003 \001(\t\022\021\n\timage_url\030\004 \001(\t\022\025\n\ronli"
    "ne_status\030\005 \001(\005\"G\n\021GroupMembeRequest\022\021\n\t"
    "timestamp\030\001 \001(\003\022\017\n\007groupID\030\002 \001(\t\022\016\n\006user"
    "ID\030\003 \001(\t\"\210\001\n\023GroupMemberResponse\022\021\n\ttime"
    "stamp\030\001 \001(\003\022\023\n\013memberCount\030\002 \001(\005\022\016\n\006user"
    "ID\030\003 \001(\t\022\017\n\007groupID\030\004 \001(\t\022(\n\007msgData\030\005 \003"
    "(\0132\027.IMChat.GroupMemberInfob\006proto3", 1995);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageChat.proto", &protobuf_RegisterTypes);
  shakeHandleReq::default_instance_ = new shakeHandleReq();
  shakeHandleRes::default_instance_ = new shakeHandleRes();
  UserData::default_instance_ = new UserData();
  MsgData::default_instance_ = new MsgData();
  UnreadMsgRequest::default_instance_ = new UnreadMsgRequest();
  UnreadMsgResponse::default_instance_ = new UnreadMsgResponse();
  PeerOnlineNotify::default_instance_ = new PeerOnlineNotify();
  PeerStatusNotify::default_instance_ = new PeerStatusNotify();
  PeerUserInfoRequest::default_instance_ = new PeerUserInfoRequest();
  PeerUserInfoResponse::default_instance_ = new PeerUserInfoResponse();
  PeerAllUserInfoRequest::default_instance_ = new PeerAllUserInfoRequest();
  PeerAllUserInfoResponse::default_instance_ = new PeerAllUserInfoResponse();
  PeerCategoryRequest::default_instance_ = new PeerCategoryRequest();
  PeerCategoryResponse::default_instance_ = new PeerCategoryResponse();
  PeerCategoryResponse_idCategory::default_instance_ = new PeerCategoryResponse_idCategory();
  GroupAllRequest::default_instance_ = new GroupAllRequest();
  GroupInfo::default_instance_ = new GroupInfo();
  GroupAllResponse::default_instance_ = new GroupAllResponse();
  GroupMemberInfo::default_instance_ = new GroupMemberInfo();
  GroupMembeRequest::default_instance_ = new GroupMembeRequest();
  GroupMemberResponse::default_instance_ = new GroupMemberResponse();
  shakeHandleReq::default_instance_->InitAsDefaultInstance();
  shakeHandleRes::default_instance_->InitAsDefaultInstance();
  UserData::default_instance_->InitAsDefaultInstance();
  MsgData::default_instance_->InitAsDefaultInstance();
  UnreadMsgRequest::default_instance_->InitAsDefaultInstance();
  UnreadMsgResponse::default_instance_->InitAsDefaultInstance();
  PeerOnlineNotify::default_instance_->InitAsDefaultInstance();
  PeerStatusNotify::default_instance_->InitAsDefaultInstance();
  PeerUserInfoRequest::default_instance_->InitAsDefaultInstance();
  PeerUserInfoResponse::default_instance_->InitAsDefaultInstance();
  PeerAllUserInfoRequest::default_instance_->InitAsDefaultInstance();
  PeerAllUserInfoResponse::default_instance_->InitAsDefaultInstance();
  PeerCategoryRequest::default_instance_->InitAsDefaultInstance();
  PeerCategoryResponse::default_instance_->InitAsDefaultInstance();
  PeerCategoryResponse_idCategory::default_instance_->InitAsDefaultInstance();
  GroupAllRequest::default_instance_->InitAsDefaultInstance();
  GroupInfo::default_instance_->InitAsDefaultInstance();
  GroupAllResponse::default_instance_->InitAsDefaultInstance();
  GroupMemberInfo::default_instance_->InitAsDefaultInstance();
  GroupMembeRequest::default_instance_->InitAsDefaultInstance();
  GroupMemberResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageChat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageChat_2eproto {
  StaticDescriptorInitializer_MessageChat_2eproto() {
    protobuf_AddDesc_MessageChat_2eproto();
  }
} static_descriptor_initializer_MessageChat_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int shakeHandleReq::kTimestampFieldNumber;
const int shakeHandleReq::kUserIDFieldNumber;
#endif  // !_MSC_VER

shakeHandleReq::shakeHandleReq()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMChat.shakeHandleReq)
}

void shakeHandleReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

shakeHandleReq::shakeHandleReq(const shakeHandleReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMChat.shakeHandleReq)
}

void shakeHandleReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

shakeHandleReq::~shakeHandleReq() {
  // @@protoc_insertion_point(destructor:IMChat.shakeHandleReq)
  SharedDtor();
}

void shakeHandleReq::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void shakeHandleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shakeHandleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shakeHandleReq_descriptor_;
}

const shakeHandleReq& shakeHandleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageChat_2eproto();
  return *default_instance_;
}

shakeHandleReq* shakeHandleReq::default_instance_ = NULL;

shakeHandleReq* shakeHandleReq::New(::google::protobuf::Arena* arena) const {
  shakeHandleReq* n = new shakeHandleReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void shakeHandleReq::Clear() {
  timestamp_ = GOOGLE_LONGLONG(0);
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool shakeHandleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMChat.shakeHandleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userID;
        break;
      }

      // optional string userID = 2;
      case 2: {
        if (tag == 18) {
         parse_userID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.shakeHandleReq.userID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMChat.shakeHandleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMChat.shakeHandleReq)
  return false;
#undef DO_
}

void shakeHandleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMChat.shakeHandleReq)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.shakeHandleReq.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:IMChat.shakeHandleReq)
}

::google::protobuf::uint8* shakeHandleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMChat.shakeHandleReq)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.shakeHandleReq.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IMChat.shakeHandleReq)
  return target;
}

int shakeHandleReq::ByteSize() const {
  int total_size = 0;

  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shakeHandleReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const shakeHandleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const shakeHandleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void shakeHandleReq::MergeFrom(const shakeHandleReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
}

void shakeHandleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shakeHandleReq::CopyFrom(const shakeHandleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shakeHandleReq::IsInitialized() const {

  return true;
}

void shakeHandleReq::Swap(shakeHandleReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void shakeHandleReq::InternalSwap(shakeHandleReq* other) {
  std::swap(timestamp_, other->timestamp_);
  userid_.Swap(&other->userid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata shakeHandleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = shakeHandleReq_descriptor_;
  metadata.reflection = shakeHandleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int shakeHandleRes::kTimestampFieldNumber;
const int shakeHandleRes::kResultFieldNumber;
#endif  // !_MSC_VER

shakeHandleRes::shakeHandleRes()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMChat.shakeHandleRes)
}

void shakeHandleRes::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

shakeHandleRes::shakeHandleRes(const shakeHandleRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMChat.shakeHandleRes)
}

void shakeHandleRes::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  result_ = 0;
}

shakeHandleRes::~shakeHandleRes() {
  // @@protoc_insertion_point(destructor:IMChat.shakeHandleRes)
  SharedDtor();
}

void shakeHandleRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void shakeHandleRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shakeHandleRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shakeHandleRes_descriptor_;
}

const shakeHandleRes& shakeHandleRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageChat_2eproto();
  return *default_instance_;
}

shakeHandleRes* shakeHandleRes::default_instance_ = NULL;

shakeHandleRes* shakeHandleRes::New(::google::protobuf::Arena* arena) const {
  shakeHandleRes* n = new shakeHandleRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void shakeHandleRes::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<shakeHandleRes*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(timestamp_, result_);

#undef OFFSET_OF_FIELD_
#undef ZR_

}

bool shakeHandleRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMChat.shakeHandleRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional sint32 result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMChat.shakeHandleRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMChat.shakeHandleRes)
  return false;
#undef DO_
}

void shakeHandleRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMChat.shakeHandleRes)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional sint32 result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:IMChat.shakeHandleRes)
}

::google::protobuf::uint8* shakeHandleRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMChat.shakeHandleRes)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional sint32 result = 2;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IMChat.shakeHandleRes)
  return target;
}

int shakeHandleRes::ByteSize() const {
  int total_size = 0;

  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional sint32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shakeHandleRes::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const shakeHandleRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const shakeHandleRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void shakeHandleRes::MergeFrom(const shakeHandleRes& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void shakeHandleRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shakeHandleRes::CopyFrom(const shakeHandleRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shakeHandleRes::IsInitialized() const {

  return true;
}

void shakeHandleRes::Swap(shakeHandleRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void shakeHandleRes::InternalSwap(shakeHandleRes* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata shakeHandleRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = shakeHandleRes_descriptor_;
  metadata.reflection = shakeHandleRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserData::kOnlineStatusFieldNumber;
const int UserData::kTimestampFieldNumber;
const int UserData::kUserIdFieldNumber;
const int UserData::kNameFieldNumber;
const int UserData::kNickNameFieldNumber;
const int UserData::kImageUrlFieldNumber;
const int UserData::kPositionFieldNumber;
const int UserData::kEmailFieldNumber;
const int UserData::kSexFieldNumber;
#endif  // !_MSC_VER

UserData::UserData()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMChat.UserData)
}

void UserData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UserData::UserData(const UserData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMChat.UserData)
}

void UserData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  online_status_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0;
}

UserData::~UserData() {
  // @@protoc_insertion_point(destructor:IMChat.UserData)
  SharedDtor();
}

void UserData::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserData_descriptor_;
}

const UserData& UserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageChat_2eproto();
  return *default_instance_;
}

UserData* UserData::default_instance_ = NULL;

UserData* UserData::New(::google::protobuf::Arena* arena) const {
  UserData* n = new UserData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserData::Clear() {
  online_status_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = 0;
}

bool UserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMChat.UserData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 online_status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &online_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_id;
        break;
      }

      // optional string user_id = 3;
      case 3: {
        if (tag == 26) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.UserData.user_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.UserData.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 5;
      case 5: {
        if (tag == 42) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.UserData.nick_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_image_url;
        break;
      }

      // optional string image_url = 6;
      case 6: {
        if (tag == 50) {
         parse_image_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image_url().data(), this->image_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.UserData.image_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_position;
        break;
      }

      // optional string position = 7;
      case 7: {
        if (tag == 58) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->position().data(), this->position().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.UserData.position");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_email;
        break;
      }

      // optional string email = 8;
      case 8: {
        if (tag == 66) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.UserData.email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_sex;
        break;
      }

      // optional sint32 sex = 9;
      case 9: {
        if (tag == 72) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &sex_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMChat.UserData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMChat.UserData)
  return false;
#undef DO_
}

void UserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMChat.UserData)
  // optional sint32 online_status = 1;
  if (this->online_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->online_status(), output);
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // optional string user_id = 3;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.UserData.user_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_id(), output);
  }

  // optional string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.UserData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional string nick_name = 5;
  if (this->nick_name().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.UserData.nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->nick_name(), output);
  }

  // optional string image_url = 6;
  if (this->image_url().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_url().data(), this->image_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.UserData.image_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->image_url(), output);
  }

  // optional string position = 7;
  if (this->position().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.UserData.position");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->position(), output);
  }

  // optional string email = 8;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.UserData.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->email(), output);
  }

  // optional sint32 sex = 9;
  if (this->sex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->sex(), output);
  }

  // @@protoc_insertion_point(serialize_end:IMChat.UserData)
}

::google::protobuf::uint8* UserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMChat.UserData)
  // optional sint32 online_status = 1;
  if (this->online_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->online_status(), target);
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // optional string user_id = 3;
  if (this->user_id().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.UserData.user_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_id(), target);
  }

  // optional string name = 4;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.UserData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string nick_name = 5;
  if (this->nick_name().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.UserData.nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nick_name(), target);
  }

  // optional string image_url = 6;
  if (this->image_url().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_url().data(), this->image_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.UserData.image_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->image_url(), target);
  }

  // optional string position = 7;
  if (this->position().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.UserData.position");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->position(), target);
  }

  // optional string email = 8;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.UserData.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->email(), target);
  }

  // optional sint32 sex = 9;
  if (this->sex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->sex(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IMChat.UserData)
  return target;
}

int UserData::ByteSize() const {
  int total_size = 0;

  // optional sint32 online_status = 1;
  if (this->online_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->online_status());
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional string user_id = 3;
  if (this->user_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  // optional string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string nick_name = 5;
  if (this->nick_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nick_name());
  }

  // optional string image_url = 6;
  if (this->image_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image_url());
  }

  // optional string position = 7;
  if (this->position().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->position());
  }

  // optional string email = 8;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  // optional sint32 sex = 9;
  if (this->sex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->sex());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserData::MergeFrom(const UserData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.online_status() != 0) {
    set_online_status(from.online_status());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.user_id().size() > 0) {

    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.nick_name().size() > 0) {

    nick_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_name_);
  }
  if (from.image_url().size() > 0) {

    image_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_url_);
  }
  if (from.position().size() > 0) {

    position_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.position_);
  }
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  if (from.sex() != 0) {
    set_sex(from.sex());
  }
}

void UserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserData::CopyFrom(const UserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData::IsInitialized() const {

  return true;
}

void UserData::Swap(UserData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserData::InternalSwap(UserData* other) {
  std::swap(online_status_, other->online_status_);
  std::swap(timestamp_, other->timestamp_);
  user_id_.Swap(&other->user_id_);
  name_.Swap(&other->name_);
  nick_name_.Swap(&other->nick_name_);
  image_url_.Swap(&other->image_url_);
  position_.Swap(&other->position_);
  email_.Swap(&other->email_);
  std::swap(sex_, other->sex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserData_descriptor_;
  metadata.reflection = UserData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgData_MSGTYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgData_MSGTYPE_descriptor_;
}
bool MsgData_MSGTYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgData_MSGTYPE MsgData::CHAT_TEXT;
const MsgData_MSGTYPE MsgData::CHAT_AUDIO;
const MsgData_MSGTYPE MsgData::GROUPCHAT_TEXT;
const MsgData_MSGTYPE MsgData::GROUPCHAT_AUDIO;
const MsgData_MSGTYPE MsgData::MSGTYPE_MIN;
const MsgData_MSGTYPE MsgData::MSGTYPE_MAX;
const int MsgData::MSGTYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgData::kTimestampFieldNumber;
const int MsgData::kSequenceNumberFieldNumber;
const int MsgData::kFromIdFieldNumber;
const int MsgData::kToIDFieldNumber;
const int MsgData::kMsgDataFieldNumber;
const int MsgData::kTypeFieldNumber;
#endif  // !_MSC_VER

MsgData::MsgData()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMChat.MsgData)
}

void MsgData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgData::MsgData(const MsgData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMChat.MsgData)
}

void MsgData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  sequencenumber_ = 0u;
  fromid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  toid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

MsgData::~MsgData() {
  // @@protoc_insertion_point(destructor:IMChat.MsgData)
  SharedDtor();
}

void MsgData::SharedDtor() {
  fromid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  toid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MsgData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgData_descriptor_;
}

const MsgData& MsgData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageChat_2eproto();
  return *default_instance_;
}

MsgData* MsgData::default_instance_ = NULL;

MsgData* MsgData::New(::google::protobuf::Arena* arena) const {
  MsgData* n = new MsgData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MsgData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(sequencenumber_, type_);
  timestamp_ = GOOGLE_LONGLONG(0);
  fromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  toid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef OFFSET_OF_FIELD_
#undef ZR_

}

bool MsgData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMChat.MsgData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_SequenceNumber;
        break;
      }

      // optional fixed32 SequenceNumber = 2;
      case 2: {
        if (tag == 21) {
         parse_SequenceNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &sequencenumber_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fromId;
        break;
      }

      // optional string fromId = 3;
      case 3: {
        if (tag == 26) {
         parse_fromId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromid().data(), this->fromid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.MsgData.fromId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_toID;
        break;
      }

      // optional string toID = 4;
      case 4: {
        if (tag == 34) {
         parse_toID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_toid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->toid().data(), this->toid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.MsgData.toID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_msgData;
        break;
      }

      // optional bytes msgData = 5;
      case 5: {
        if (tag == 42) {
         parse_msgData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msgdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional .IMChat.MsgData.MSGTYPE type = 6;
      case 6: {
        if (tag == 48) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::IMChat::MsgData_MSGTYPE >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMChat.MsgData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMChat.MsgData)
  return false;
#undef DO_
}

void MsgData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMChat.MsgData)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional fixed32 SequenceNumber = 2;
  if (this->sequencenumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->sequencenumber(), output);
  }

  // optional string fromId = 3;
  if (this->fromid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromid().data(), this->fromid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.MsgData.fromId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fromid(), output);
  }

  // optional string toID = 4;
  if (this->toid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->toid().data(), this->toid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.MsgData.toID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->toid(), output);
  }

  // optional bytes msgData = 5;
  if (this->msgdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->msgdata(), output);
  }

  // optional .IMChat.MsgData.MSGTYPE type = 6;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:IMChat.MsgData)
}

::google::protobuf::uint8* MsgData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMChat.MsgData)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional fixed32 SequenceNumber = 2;
  if (this->sequencenumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->sequencenumber(), target);
  }

  // optional string fromId = 3;
  if (this->fromid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromid().data(), this->fromid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.MsgData.fromId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fromid(), target);
  }

  // optional string toID = 4;
  if (this->toid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->toid().data(), this->toid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.MsgData.toID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->toid(), target);
  }

  // optional bytes msgData = 5;
  if (this->msgdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->msgdata(), target);
  }

  // optional .IMChat.MsgData.MSGTYPE type = 6;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IMChat.MsgData)
  return target;
}

int MsgData::ByteSize() const {
  int total_size = 0;

  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional fixed32 SequenceNumber = 2;
  if (this->sequencenumber() != 0) {
    total_size += 1 + 4;
  }

  // optional string fromId = 3;
  if (this->fromid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fromid());
  }

  // optional string toID = 4;
  if (this->toid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->toid());
  }

  // optional bytes msgData = 5;
  if (this->msgdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msgdata());
  }

  // optional .IMChat.MsgData.MSGTYPE type = 6;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MsgData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgData::MergeFrom(const MsgData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.sequencenumber() != 0) {
    set_sequencenumber(from.sequencenumber());
  }
  if (from.fromid().size() > 0) {

    fromid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fromid_);
  }
  if (from.toid().size() > 0) {

    toid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.toid_);
  }
  if (from.msgdata().size() > 0) {

    msgdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgdata_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void MsgData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgData::CopyFrom(const MsgData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgData::IsInitialized() const {

  return true;
}

void MsgData::Swap(MsgData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgData::InternalSwap(MsgData* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(sequencenumber_, other->sequencenumber_);
  fromid_.Swap(&other->fromid_);
  toid_.Swap(&other->toid_);
  msgdata_.Swap(&other->msgdata_);
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgData_descriptor_;
  metadata.reflection = MsgData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnreadMsgRequest::kUserIdFieldNumber;
const int UnreadMsgRequest::kTimestampFieldNumber;
#endif  // !_MSC_VER

UnreadMsgRequest::UnreadMsgRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMChat.UnreadMsgRequest)
}

void UnreadMsgRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UnreadMsgRequest::UnreadMsgRequest(const UnreadMsgRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMChat.UnreadMsgRequest)
}

void UnreadMsgRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
}

UnreadMsgRequest::~UnreadMsgRequest() {
  // @@protoc_insertion_point(destructor:IMChat.UnreadMsgRequest)
  SharedDtor();
}

void UnreadMsgRequest::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UnreadMsgRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnreadMsgRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnreadMsgRequest_descriptor_;
}

const UnreadMsgRequest& UnreadMsgRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageChat_2eproto();
  return *default_instance_;
}

UnreadMsgRequest* UnreadMsgRequest::default_instance_ = NULL;

UnreadMsgRequest* UnreadMsgRequest::New(::google::protobuf::Arena* arena) const {
  UnreadMsgRequest* n = new UnreadMsgRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnreadMsgRequest::Clear() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
}

bool UnreadMsgRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMChat.UnreadMsgRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.UnreadMsgRequest.userId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMChat.UnreadMsgRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMChat.UnreadMsgRequest)
  return false;
#undef DO_
}

void UnreadMsgRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMChat.UnreadMsgRequest)
  // optional string userId = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.UnreadMsgRequest.userId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:IMChat.UnreadMsgRequest)
}

::google::protobuf::uint8* UnreadMsgRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMChat.UnreadMsgRequest)
  // optional string userId = 1;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.UnreadMsgRequest.userId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IMChat.UnreadMsgRequest)
  return target;
}

int UnreadMsgRequest::ByteSize() const {
  int total_size = 0;

  // optional string userId = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnreadMsgRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UnreadMsgRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnreadMsgRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnreadMsgRequest::MergeFrom(const UnreadMsgRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void UnreadMsgRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnreadMsgRequest::CopyFrom(const UnreadMsgRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnreadMsgRequest::IsInitialized() const {

  return true;
}

void UnreadMsgRequest::Swap(UnreadMsgRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnreadMsgRequest::InternalSwap(UnreadMsgRequest* other) {
  userid_.Swap(&other->userid_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnreadMsgRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnreadMsgRequest_descriptor_;
  metadata.reflection = UnreadMsgRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnreadMsgResponse::kMsgCountFieldNumber;
const int UnreadMsgResponse::kTimestampFieldNumber;
const int UnreadMsgResponse::kUserIDFieldNumber;
const int UnreadMsgResponse::kMsgDataFieldNumber;
#endif  // !_MSC_VER

UnreadMsgResponse::UnreadMsgResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMChat.UnreadMsgResponse)
}

void UnreadMsgResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UnreadMsgResponse::UnreadMsgResponse(const UnreadMsgResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMChat.UnreadMsgResponse)
}

void UnreadMsgResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgcount_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UnreadMsgResponse::~UnreadMsgResponse() {
  // @@protoc_insertion_point(destructor:IMChat.UnreadMsgResponse)
  SharedDtor();
}

void UnreadMsgResponse::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UnreadMsgResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnreadMsgResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnreadMsgResponse_descriptor_;
}

const UnreadMsgResponse& UnreadMsgResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageChat_2eproto();
  return *default_instance_;
}

UnreadMsgResponse* UnreadMsgResponse::default_instance_ = NULL;

UnreadMsgResponse* UnreadMsgResponse::New(::google::protobuf::Arena* arena) const {
  UnreadMsgResponse* n = new UnreadMsgResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnreadMsgResponse::Clear() {
  msgcount_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgdata_.Clear();
}

bool UnreadMsgResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMChat.UnreadMsgResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 msgCount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgcount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_userID;
        break;
      }

      // optional string userID = 3;
      case 3: {
        if (tag == 26) {
         parse_userID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.UnreadMsgResponse.userID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msgData;
        break;
      }

      // repeated bytes msgData = 4;
      case 4: {
        if (tag == 34) {
         parse_msgData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_msgdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msgData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMChat.UnreadMsgResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMChat.UnreadMsgResponse)
  return false;
#undef DO_
}

void UnreadMsgResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMChat.UnreadMsgResponse)
  // optional int32 msgCount = 1;
  if (this->msgcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msgcount(), output);
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // optional string userID = 3;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.UnreadMsgResponse.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->userid(), output);
  }

  // repeated bytes msgData = 4;
  for (int i = 0; i < this->msgdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->msgdata(i), output);
  }

  // @@protoc_insertion_point(serialize_end:IMChat.UnreadMsgResponse)
}

::google::protobuf::uint8* UnreadMsgResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMChat.UnreadMsgResponse)
  // optional int32 msgCount = 1;
  if (this->msgcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msgcount(), target);
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // optional string userID = 3;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.UnreadMsgResponse.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userid(), target);
  }

  // repeated bytes msgData = 4;
  for (int i = 0; i < this->msgdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->msgdata(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IMChat.UnreadMsgResponse)
  return target;
}

int UnreadMsgResponse::ByteSize() const {
  int total_size = 0;

  // optional int32 msgCount = 1;
  if (this->msgcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgcount());
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional string userID = 3;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // repeated bytes msgData = 4;
  total_size += 1 * this->msgdata_size();
  for (int i = 0; i < this->msgdata_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->msgdata(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnreadMsgResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UnreadMsgResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnreadMsgResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnreadMsgResponse::MergeFrom(const UnreadMsgResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  msgdata_.MergeFrom(from.msgdata_);
  if (from.msgcount() != 0) {
    set_msgcount(from.msgcount());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
}

void UnreadMsgResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnreadMsgResponse::CopyFrom(const UnreadMsgResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnreadMsgResponse::IsInitialized() const {

  return true;
}

void UnreadMsgResponse::Swap(UnreadMsgResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnreadMsgResponse::InternalSwap(UnreadMsgResponse* other) {
  std::swap(msgcount_, other->msgcount_);
  std::swap(timestamp_, other->timestamp_);
  userid_.Swap(&other->userid_);
  msgdata_.UnsafeArenaSwap(&other->msgdata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnreadMsgResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnreadMsgResponse_descriptor_;
  metadata.reflection = UnreadMsgResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PeerOnlineNotify::kOnlineCountFieldNumber;
const int PeerOnlineNotify::kTimestampFieldNumber;
const int PeerOnlineNotify::kUserIDFieldNumber;
const int PeerOnlineNotify::kMsgDataFieldNumber;
#endif  // !_MSC_VER

PeerOnlineNotify::PeerOnlineNotify()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMChat.PeerOnlineNotify)
}

void PeerOnlineNotify::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PeerOnlineNotify::PeerOnlineNotify(const PeerOnlineNotify& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMChat.PeerOnlineNotify)
}

void PeerOnlineNotify::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  onlinecount_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PeerOnlineNotify::~PeerOnlineNotify() {
  // @@protoc_insertion_point(destructor:IMChat.PeerOnlineNotify)
  SharedDtor();
}

void PeerOnlineNotify::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PeerOnlineNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerOnlineNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeerOnlineNotify_descriptor_;
}

const PeerOnlineNotify& PeerOnlineNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageChat_2eproto();
  return *default_instance_;
}

PeerOnlineNotify* PeerOnlineNotify::default_instance_ = NULL;

PeerOnlineNotify* PeerOnlineNotify::New(::google::protobuf::Arena* arena) const {
  PeerOnlineNotify* n = new PeerOnlineNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeerOnlineNotify::Clear() {
  onlinecount_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgdata_.Clear();
}

bool PeerOnlineNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMChat.PeerOnlineNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 onlineCount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlinecount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_userID;
        break;
      }

      // optional string userID = 3;
      case 3: {
        if (tag == 26) {
         parse_userID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.PeerOnlineNotify.userID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msgData;
        break;
      }

      // repeated string msgData = 4;
      case 4: {
        if (tag == 34) {
         parse_msgData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_msgdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgdata(this->msgdata_size() - 1).data(),
            this->msgdata(this->msgdata_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.PeerOnlineNotify.msgData");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msgData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMChat.PeerOnlineNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMChat.PeerOnlineNotify)
  return false;
#undef DO_
}

void PeerOnlineNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMChat.PeerOnlineNotify)
  // optional int32 onlineCount = 1;
  if (this->onlinecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->onlinecount(), output);
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // optional string userID = 3;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.PeerOnlineNotify.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->userid(), output);
  }

  // repeated string msgData = 4;
  for (int i = 0; i < this->msgdata_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->msgdata(i).data(), this->msgdata(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "IMChat.PeerOnlineNotify.msgData");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->msgdata(i), output);
  }

  // @@protoc_insertion_point(serialize_end:IMChat.PeerOnlineNotify)
}

::google::protobuf::uint8* PeerOnlineNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMChat.PeerOnlineNotify)
  // optional int32 onlineCount = 1;
  if (this->onlinecount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->onlinecount(), target);
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // optional string userID = 3;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.PeerOnlineNotify.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userid(), target);
  }

  // repeated string msgData = 4;
  for (int i = 0; i < this->msgdata_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgdata(i).data(), this->msgdata(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.PeerOnlineNotify.msgData");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->msgdata(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IMChat.PeerOnlineNotify)
  return target;
}

int PeerOnlineNotify::ByteSize() const {
  int total_size = 0;

  // optional int32 onlineCount = 1;
  if (this->onlinecount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->onlinecount());
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional string userID = 3;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // repeated string msgData = 4;
  total_size += 1 * this->msgdata_size();
  for (int i = 0; i < this->msgdata_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->msgdata(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerOnlineNotify::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PeerOnlineNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PeerOnlineNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeerOnlineNotify::MergeFrom(const PeerOnlineNotify& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  msgdata_.MergeFrom(from.msgdata_);
  if (from.onlinecount() != 0) {
    set_onlinecount(from.onlinecount());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
}

void PeerOnlineNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerOnlineNotify::CopyFrom(const PeerOnlineNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerOnlineNotify::IsInitialized() const {

  return true;
}

void PeerOnlineNotify::Swap(PeerOnlineNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerOnlineNotify::InternalSwap(PeerOnlineNotify* other) {
  std::swap(onlinecount_, other->onlinecount_);
  std::swap(timestamp_, other->timestamp_);
  userid_.Swap(&other->userid_);
  msgdata_.UnsafeArenaSwap(&other->msgdata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PeerOnlineNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeerOnlineNotify_descriptor_;
  metadata.reflection = PeerOnlineNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PeerStatusNotify::kStatusCountFieldNumber;
const int PeerStatusNotify::kTimestampFieldNumber;
const int PeerStatusNotify::kUserIDFieldNumber;
const int PeerStatusNotify::kMsgDataFieldNumber;
#endif  // !_MSC_VER

PeerStatusNotify::PeerStatusNotify()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMChat.PeerStatusNotify)
}

void PeerStatusNotify::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PeerStatusNotify::PeerStatusNotify(const PeerStatusNotify& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMChat.PeerStatusNotify)
}

void PeerStatusNotify::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  statuscount_ = 0u;
  timestamp_ = GOOGLE_LONGLONG(0);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PeerStatusNotify::~PeerStatusNotify() {
  // @@protoc_insertion_point(destructor:IMChat.PeerStatusNotify)
  SharedDtor();
}

void PeerStatusNotify::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PeerStatusNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerStatusNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeerStatusNotify_descriptor_;
}

const PeerStatusNotify& PeerStatusNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageChat_2eproto();
  return *default_instance_;
}

PeerStatusNotify* PeerStatusNotify::default_instance_ = NULL;

PeerStatusNotify* PeerStatusNotify::New(::google::protobuf::Arena* arena) const {
  PeerStatusNotify* n = new PeerStatusNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeerStatusNotify::Clear() {
  statuscount_ = 0u;
  timestamp_ = GOOGLE_LONGLONG(0);
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgdata_.Clear();
}

bool PeerStatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMChat.PeerStatusNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 statusCount = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &statuscount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_userID;
        break;
      }

      // optional string userID = 3;
      case 3: {
        if (tag == 26) {
         parse_userID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.PeerStatusNotify.userID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msgData;
        break;
      }

      // repeated string msgData = 4;
      case 4: {
        if (tag == 34) {
         parse_msgData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_msgdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgdata(this->msgdata_size() - 1).data(),
            this->msgdata(this->msgdata_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.PeerStatusNotify.msgData");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msgData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMChat.PeerStatusNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMChat.PeerStatusNotify)
  return false;
#undef DO_
}

void PeerStatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMChat.PeerStatusNotify)
  // optional fixed32 statusCount = 1;
  if (this->statuscount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->statuscount(), output);
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // optional string userID = 3;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.PeerStatusNotify.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->userid(), output);
  }

  // repeated string msgData = 4;
  for (int i = 0; i < this->msgdata_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->msgdata(i).data(), this->msgdata(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "IMChat.PeerStatusNotify.msgData");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->msgdata(i), output);
  }

  // @@protoc_insertion_point(serialize_end:IMChat.PeerStatusNotify)
}

::google::protobuf::uint8* PeerStatusNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMChat.PeerStatusNotify)
  // optional fixed32 statusCount = 1;
  if (this->statuscount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->statuscount(), target);
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // optional string userID = 3;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.PeerStatusNotify.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userid(), target);
  }

  // repeated string msgData = 4;
  for (int i = 0; i < this->msgdata_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgdata(i).data(), this->msgdata(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.PeerStatusNotify.msgData");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->msgdata(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IMChat.PeerStatusNotify)
  return target;
}

int PeerStatusNotify::ByteSize() const {
  int total_size = 0;

  // optional fixed32 statusCount = 1;
  if (this->statuscount() != 0) {
    total_size += 1 + 4;
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional string userID = 3;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // repeated string msgData = 4;
  total_size += 1 * this->msgdata_size();
  for (int i = 0; i < this->msgdata_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->msgdata(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerStatusNotify::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PeerStatusNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PeerStatusNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeerStatusNotify::MergeFrom(const PeerStatusNotify& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  msgdata_.MergeFrom(from.msgdata_);
  if (from.statuscount() != 0) {
    set_statuscount(from.statuscount());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
}

void PeerStatusNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerStatusNotify::CopyFrom(const PeerStatusNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerStatusNotify::IsInitialized() const {

  return true;
}

void PeerStatusNotify::Swap(PeerStatusNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerStatusNotify::InternalSwap(PeerStatusNotify* other) {
  std::swap(statuscount_, other->statuscount_);
  std::swap(timestamp_, other->timestamp_);
  userid_.Swap(&other->userid_);
  msgdata_.UnsafeArenaSwap(&other->msgdata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PeerStatusNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeerStatusNotify_descriptor_;
  metadata.reflection = PeerStatusNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PeerUserInfoRequest::kTimestampFieldNumber;
const int PeerUserInfoRequest::kUserIDFieldNumber;
const int PeerUserInfoRequest::kRequestIDFieldNumber;
#endif  // !_MSC_VER

PeerUserInfoRequest::PeerUserInfoRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMChat.PeerUserInfoRequest)
}

void PeerUserInfoRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PeerUserInfoRequest::PeerUserInfoRequest(const PeerUserInfoRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMChat.PeerUserInfoRequest)
}

void PeerUserInfoRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PeerUserInfoRequest::~PeerUserInfoRequest() {
  // @@protoc_insertion_point(destructor:IMChat.PeerUserInfoRequest)
  SharedDtor();
}

void PeerUserInfoRequest::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PeerUserInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerUserInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeerUserInfoRequest_descriptor_;
}

const PeerUserInfoRequest& PeerUserInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageChat_2eproto();
  return *default_instance_;
}

PeerUserInfoRequest* PeerUserInfoRequest::default_instance_ = NULL;

PeerUserInfoRequest* PeerUserInfoRequest::New(::google::protobuf::Arena* arena) const {
  PeerUserInfoRequest* n = new PeerUserInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeerUserInfoRequest::Clear() {
  timestamp_ = GOOGLE_LONGLONG(0);
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requestid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PeerUserInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMChat.PeerUserInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userID;
        break;
      }

      // optional string userID = 2;
      case 2: {
        if (tag == 18) {
         parse_userID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.PeerUserInfoRequest.userID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_requestID;
        break;
      }

      // optional string requestID = 3;
      case 3: {
        if (tag == 26) {
         parse_requestID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requestid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requestid().data(), this->requestid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.PeerUserInfoRequest.requestID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMChat.PeerUserInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMChat.PeerUserInfoRequest)
  return false;
#undef DO_
}

void PeerUserInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMChat.PeerUserInfoRequest)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.PeerUserInfoRequest.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  // optional string requestID = 3;
  if (this->requestid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.PeerUserInfoRequest.requestID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->requestid(), output);
  }

  // @@protoc_insertion_point(serialize_end:IMChat.PeerUserInfoRequest)
}

::google::protobuf::uint8* PeerUserInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMChat.PeerUserInfoRequest)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.PeerUserInfoRequest.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // optional string requestID = 3;
  if (this->requestid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requestid().data(), this->requestid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.PeerUserInfoRequest.requestID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->requestid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IMChat.PeerUserInfoRequest)
  return target;
}

int PeerUserInfoRequest::ByteSize() const {
  int total_size = 0;

  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional string requestID = 3;
  if (this->requestid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->requestid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerUserInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PeerUserInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PeerUserInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeerUserInfoRequest::MergeFrom(const PeerUserInfoRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.requestid().size() > 0) {

    requestid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requestid_);
  }
}

void PeerUserInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerUserInfoRequest::CopyFrom(const PeerUserInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerUserInfoRequest::IsInitialized() const {

  return true;
}

void PeerUserInfoRequest::Swap(PeerUserInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerUserInfoRequest::InternalSwap(PeerUserInfoRequest* other) {
  std::swap(timestamp_, other->timestamp_);
  userid_.Swap(&other->userid_);
  requestid_.Swap(&other->requestid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PeerUserInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeerUserInfoRequest_descriptor_;
  metadata.reflection = PeerUserInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PeerUserInfoResponse::kTimestampFieldNumber;
const int PeerUserInfoResponse::kUserInfoFieldNumber;
#endif  // !_MSC_VER

PeerUserInfoResponse::PeerUserInfoResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMChat.PeerUserInfoResponse)
}

void PeerUserInfoResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  userinfo_ = const_cast< ::IMChat::UserData*>(&::IMChat::UserData::default_instance());
}

PeerUserInfoResponse::PeerUserInfoResponse(const PeerUserInfoResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMChat.PeerUserInfoResponse)
}

void PeerUserInfoResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  userinfo_ = NULL;
}

PeerUserInfoResponse::~PeerUserInfoResponse() {
  // @@protoc_insertion_point(destructor:IMChat.PeerUserInfoResponse)
  SharedDtor();
}

void PeerUserInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void PeerUserInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerUserInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeerUserInfoResponse_descriptor_;
}

const PeerUserInfoResponse& PeerUserInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageChat_2eproto();
  return *default_instance_;
}

PeerUserInfoResponse* PeerUserInfoResponse::default_instance_ = NULL;

PeerUserInfoResponse* PeerUserInfoResponse::New(::google::protobuf::Arena* arena) const {
  PeerUserInfoResponse* n = new PeerUserInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeerUserInfoResponse::Clear() {
  timestamp_ = GOOGLE_LONGLONG(0);
  if (userinfo_ != NULL) delete userinfo_;
  userinfo_ = NULL;
}

bool PeerUserInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMChat.PeerUserInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userInfo;
        break;
      }

      // optional .IMChat.UserData userInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_userInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMChat.PeerUserInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMChat.PeerUserInfoResponse)
  return false;
#undef DO_
}

void PeerUserInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMChat.PeerUserInfoResponse)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional .IMChat.UserData userInfo = 2;
  if (this->has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->userinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:IMChat.PeerUserInfoResponse)
}

::google::protobuf::uint8* PeerUserInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMChat.PeerUserInfoResponse)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional .IMChat.UserData userInfo = 2;
  if (this->has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->userinfo_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IMChat.PeerUserInfoResponse)
  return target;
}

int PeerUserInfoResponse::ByteSize() const {
  int total_size = 0;

  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional .IMChat.UserData userInfo = 2;
  if (this->has_userinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->userinfo_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerUserInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PeerUserInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PeerUserInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeerUserInfoResponse::MergeFrom(const PeerUserInfoResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.has_userinfo()) {
    mutable_userinfo()->::IMChat::UserData::MergeFrom(from.userinfo());
  }
}

void PeerUserInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerUserInfoResponse::CopyFrom(const PeerUserInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerUserInfoResponse::IsInitialized() const {

  return true;
}

void PeerUserInfoResponse::Swap(PeerUserInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerUserInfoResponse::InternalSwap(PeerUserInfoResponse* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(userinfo_, other->userinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PeerUserInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeerUserInfoResponse_descriptor_;
  metadata.reflection = PeerUserInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PeerAllUserInfoRequest::kTimestampFieldNumber;
const int PeerAllUserInfoRequest::kUserIDFieldNumber;
#endif  // !_MSC_VER

PeerAllUserInfoRequest::PeerAllUserInfoRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMChat.PeerAllUserInfoRequest)
}

void PeerAllUserInfoRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PeerAllUserInfoRequest::PeerAllUserInfoRequest(const PeerAllUserInfoRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMChat.PeerAllUserInfoRequest)
}

void PeerAllUserInfoRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PeerAllUserInfoRequest::~PeerAllUserInfoRequest() {
  // @@protoc_insertion_point(destructor:IMChat.PeerAllUserInfoRequest)
  SharedDtor();
}

void PeerAllUserInfoRequest::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PeerAllUserInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerAllUserInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeerAllUserInfoRequest_descriptor_;
}

const PeerAllUserInfoRequest& PeerAllUserInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageChat_2eproto();
  return *default_instance_;
}

PeerAllUserInfoRequest* PeerAllUserInfoRequest::default_instance_ = NULL;

PeerAllUserInfoRequest* PeerAllUserInfoRequest::New(::google::protobuf::Arena* arena) const {
  PeerAllUserInfoRequest* n = new PeerAllUserInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeerAllUserInfoRequest::Clear() {
  timestamp_ = GOOGLE_LONGLONG(0);
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PeerAllUserInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMChat.PeerAllUserInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userID;
        break;
      }

      // optional string userID = 2;
      case 2: {
        if (tag == 18) {
         parse_userID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.PeerAllUserInfoRequest.userID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMChat.PeerAllUserInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMChat.PeerAllUserInfoRequest)
  return false;
#undef DO_
}

void PeerAllUserInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMChat.PeerAllUserInfoRequest)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.PeerAllUserInfoRequest.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:IMChat.PeerAllUserInfoRequest)
}

::google::protobuf::uint8* PeerAllUserInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMChat.PeerAllUserInfoRequest)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.PeerAllUserInfoRequest.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IMChat.PeerAllUserInfoRequest)
  return target;
}

int PeerAllUserInfoRequest::ByteSize() const {
  int total_size = 0;

  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerAllUserInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PeerAllUserInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PeerAllUserInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeerAllUserInfoRequest::MergeFrom(const PeerAllUserInfoRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
}

void PeerAllUserInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerAllUserInfoRequest::CopyFrom(const PeerAllUserInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerAllUserInfoRequest::IsInitialized() const {

  return true;
}

void PeerAllUserInfoRequest::Swap(PeerAllUserInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerAllUserInfoRequest::InternalSwap(PeerAllUserInfoRequest* other) {
  std::swap(timestamp_, other->timestamp_);
  userid_.Swap(&other->userid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PeerAllUserInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeerAllUserInfoRequest_descriptor_;
  metadata.reflection = PeerAllUserInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PeerAllUserInfoResponse::kTimestampFieldNumber;
const int PeerAllUserInfoResponse::kFriendsCountFieldNumber;
const int PeerAllUserInfoResponse::kUserIDFieldNumber;
const int PeerAllUserInfoResponse::kMsgDataFieldNumber;
#endif  // !_MSC_VER

PeerAllUserInfoResponse::PeerAllUserInfoResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMChat.PeerAllUserInfoResponse)
}

void PeerAllUserInfoResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PeerAllUserInfoResponse::PeerAllUserInfoResponse(const PeerAllUserInfoResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMChat.PeerAllUserInfoResponse)
}

void PeerAllUserInfoResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  friendscount_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PeerAllUserInfoResponse::~PeerAllUserInfoResponse() {
  // @@protoc_insertion_point(destructor:IMChat.PeerAllUserInfoResponse)
  SharedDtor();
}

void PeerAllUserInfoResponse::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PeerAllUserInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerAllUserInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeerAllUserInfoResponse_descriptor_;
}

const PeerAllUserInfoResponse& PeerAllUserInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageChat_2eproto();
  return *default_instance_;
}

PeerAllUserInfoResponse* PeerAllUserInfoResponse::default_instance_ = NULL;

PeerAllUserInfoResponse* PeerAllUserInfoResponse::New(::google::protobuf::Arena* arena) const {
  PeerAllUserInfoResponse* n = new PeerAllUserInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeerAllUserInfoResponse::Clear() {
  timestamp_ = GOOGLE_LONGLONG(0);
  friendscount_ = 0;
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgdata_.Clear();
}

bool PeerAllUserInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMChat.PeerAllUserInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_friendsCount;
        break;
      }

      // optional int32 friendsCount = 2;
      case 2: {
        if (tag == 16) {
         parse_friendsCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendscount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_userID;
        break;
      }

      // optional string userID = 3;
      case 3: {
        if (tag == 26) {
         parse_userID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.PeerAllUserInfoResponse.userID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msgData;
        break;
      }

      // repeated .IMChat.UserData msgData = 4;
      case 4: {
        if (tag == 34) {
         parse_msgData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msgdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msgData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMChat.PeerAllUserInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMChat.PeerAllUserInfoResponse)
  return false;
#undef DO_
}

void PeerAllUserInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMChat.PeerAllUserInfoResponse)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional int32 friendsCount = 2;
  if (this->friendscount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->friendscount(), output);
  }

  // optional string userID = 3;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.PeerAllUserInfoResponse.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->userid(), output);
  }

  // repeated .IMChat.UserData msgData = 4;
  for (unsigned int i = 0, n = this->msgdata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->msgdata(i), output);
  }

  // @@protoc_insertion_point(serialize_end:IMChat.PeerAllUserInfoResponse)
}

::google::protobuf::uint8* PeerAllUserInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMChat.PeerAllUserInfoResponse)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional int32 friendsCount = 2;
  if (this->friendscount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->friendscount(), target);
  }

  // optional string userID = 3;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.PeerAllUserInfoResponse.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userid(), target);
  }

  // repeated .IMChat.UserData msgData = 4;
  for (unsigned int i = 0, n = this->msgdata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->msgdata(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IMChat.PeerAllUserInfoResponse)
  return target;
}

int PeerAllUserInfoResponse::ByteSize() const {
  int total_size = 0;

  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional int32 friendsCount = 2;
  if (this->friendscount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->friendscount());
  }

  // optional string userID = 3;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // repeated .IMChat.UserData msgData = 4;
  total_size += 1 * this->msgdata_size();
  for (int i = 0; i < this->msgdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msgdata(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerAllUserInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PeerAllUserInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PeerAllUserInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeerAllUserInfoResponse::MergeFrom(const PeerAllUserInfoResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  msgdata_.MergeFrom(from.msgdata_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.friendscount() != 0) {
    set_friendscount(from.friendscount());
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
}

void PeerAllUserInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerAllUserInfoResponse::CopyFrom(const PeerAllUserInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerAllUserInfoResponse::IsInitialized() const {

  return true;
}

void PeerAllUserInfoResponse::Swap(PeerAllUserInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerAllUserInfoResponse::InternalSwap(PeerAllUserInfoResponse* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(friendscount_, other->friendscount_);
  userid_.Swap(&other->userid_);
  msgdata_.UnsafeArenaSwap(&other->msgdata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PeerAllUserInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeerAllUserInfoResponse_descriptor_;
  metadata.reflection = PeerAllUserInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PeerCategoryRequest::kTimestampFieldNumber;
const int PeerCategoryRequest::kUserIDFieldNumber;
#endif  // !_MSC_VER

PeerCategoryRequest::PeerCategoryRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMChat.PeerCategoryRequest)
}

void PeerCategoryRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PeerCategoryRequest::PeerCategoryRequest(const PeerCategoryRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMChat.PeerCategoryRequest)
}

void PeerCategoryRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PeerCategoryRequest::~PeerCategoryRequest() {
  // @@protoc_insertion_point(destructor:IMChat.PeerCategoryRequest)
  SharedDtor();
}

void PeerCategoryRequest::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PeerCategoryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerCategoryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeerCategoryRequest_descriptor_;
}

const PeerCategoryRequest& PeerCategoryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageChat_2eproto();
  return *default_instance_;
}

PeerCategoryRequest* PeerCategoryRequest::default_instance_ = NULL;

PeerCategoryRequest* PeerCategoryRequest::New(::google::protobuf::Arena* arena) const {
  PeerCategoryRequest* n = new PeerCategoryRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeerCategoryRequest::Clear() {
  timestamp_ = GOOGLE_LONGLONG(0);
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PeerCategoryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMChat.PeerCategoryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userID;
        break;
      }

      // optional string userID = 2;
      case 2: {
        if (tag == 18) {
         parse_userID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.PeerCategoryRequest.userID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMChat.PeerCategoryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMChat.PeerCategoryRequest)
  return false;
#undef DO_
}

void PeerCategoryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMChat.PeerCategoryRequest)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.PeerCategoryRequest.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:IMChat.PeerCategoryRequest)
}

::google::protobuf::uint8* PeerCategoryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMChat.PeerCategoryRequest)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.PeerCategoryRequest.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IMChat.PeerCategoryRequest)
  return target;
}

int PeerCategoryRequest::ByteSize() const {
  int total_size = 0;

  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerCategoryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PeerCategoryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PeerCategoryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeerCategoryRequest::MergeFrom(const PeerCategoryRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
}

void PeerCategoryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerCategoryRequest::CopyFrom(const PeerCategoryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerCategoryRequest::IsInitialized() const {

  return true;
}

void PeerCategoryRequest::Swap(PeerCategoryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerCategoryRequest::InternalSwap(PeerCategoryRequest* other) {
  std::swap(timestamp_, other->timestamp_);
  userid_.Swap(&other->userid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PeerCategoryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeerCategoryRequest_descriptor_;
  metadata.reflection = PeerCategoryRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PeerCategoryResponse_idCategory::kCategoryIdFieldNumber;
const int PeerCategoryResponse_idCategory::kFriendIDFieldNumber;
#endif  // !_MSC_VER

PeerCategoryResponse_idCategory::PeerCategoryResponse_idCategory()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMChat.PeerCategoryResponse.idCategory)
}

void PeerCategoryResponse_idCategory::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PeerCategoryResponse_idCategory::PeerCategoryResponse_idCategory(const PeerCategoryResponse_idCategory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMChat.PeerCategoryResponse.idCategory)
}

void PeerCategoryResponse_idCategory::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  categoryid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friendid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PeerCategoryResponse_idCategory::~PeerCategoryResponse_idCategory() {
  // @@protoc_insertion_point(destructor:IMChat.PeerCategoryResponse.idCategory)
  SharedDtor();
}

void PeerCategoryResponse_idCategory::SharedDtor() {
  categoryid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friendid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PeerCategoryResponse_idCategory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerCategoryResponse_idCategory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeerCategoryResponse_idCategory_descriptor_;
}

const PeerCategoryResponse_idCategory& PeerCategoryResponse_idCategory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageChat_2eproto();
  return *default_instance_;
}

PeerCategoryResponse_idCategory* PeerCategoryResponse_idCategory::default_instance_ = NULL;

PeerCategoryResponse_idCategory* PeerCategoryResponse_idCategory::New(::google::protobuf::Arena* arena) const {
  PeerCategoryResponse_idCategory* n = new PeerCategoryResponse_idCategory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeerCategoryResponse_idCategory::Clear() {
  categoryid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friendid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool PeerCategoryResponse_idCategory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMChat.PeerCategoryResponse.idCategory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string categoryId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_categoryid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->categoryid().data(), this->categoryid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.PeerCategoryResponse.idCategory.categoryId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_friendID;
        break;
      }

      // optional string friendID = 2;
      case 2: {
        if (tag == 18) {
         parse_friendID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->friendid().data(), this->friendid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.PeerCategoryResponse.idCategory.friendID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMChat.PeerCategoryResponse.idCategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMChat.PeerCategoryResponse.idCategory)
  return false;
#undef DO_
}

void PeerCategoryResponse_idCategory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMChat.PeerCategoryResponse.idCategory)
  // optional string categoryId = 1;
  if (this->categoryid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->categoryid().data(), this->categoryid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.PeerCategoryResponse.idCategory.categoryId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->categoryid(), output);
  }

  // optional string friendID = 2;
  if (this->friendid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friendid().data(), this->friendid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.PeerCategoryResponse.idCategory.friendID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->friendid(), output);
  }

  // @@protoc_insertion_point(serialize_end:IMChat.PeerCategoryResponse.idCategory)
}

::google::protobuf::uint8* PeerCategoryResponse_idCategory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMChat.PeerCategoryResponse.idCategory)
  // optional string categoryId = 1;
  if (this->categoryid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->categoryid().data(), this->categoryid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.PeerCategoryResponse.idCategory.categoryId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->categoryid(), target);
  }

  // optional string friendID = 2;
  if (this->friendid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friendid().data(), this->friendid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.PeerCategoryResponse.idCategory.friendID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->friendid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IMChat.PeerCategoryResponse.idCategory)
  return target;
}

int PeerCategoryResponse_idCategory::ByteSize() const {
  int total_size = 0;

  // optional string categoryId = 1;
  if (this->categoryid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->categoryid());
  }

  // optional string friendID = 2;
  if (this->friendid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->friendid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerCategoryResponse_idCategory::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PeerCategoryResponse_idCategory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PeerCategoryResponse_idCategory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeerCategoryResponse_idCategory::MergeFrom(const PeerCategoryResponse_idCategory& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.categoryid().size() > 0) {

    categoryid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.categoryid_);
  }
  if (from.friendid().size() > 0) {

    friendid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friendid_);
  }
}

void PeerCategoryResponse_idCategory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerCategoryResponse_idCategory::CopyFrom(const PeerCategoryResponse_idCategory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerCategoryResponse_idCategory::IsInitialized() const {

  return true;
}

void PeerCategoryResponse_idCategory::Swap(PeerCategoryResponse_idCategory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerCategoryResponse_idCategory::InternalSwap(PeerCategoryResponse_idCategory* other) {
  categoryid_.Swap(&other->categoryid_);
  friendid_.Swap(&other->friendid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PeerCategoryResponse_idCategory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeerCategoryResponse_idCategory_descriptor_;
  metadata.reflection = PeerCategoryResponse_idCategory_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PeerCategoryResponse::kTimestampFieldNumber;
const int PeerCategoryResponse::kCategoryCountFieldNumber;
const int PeerCategoryResponse::kUserIDFieldNumber;
const int PeerCategoryResponse::kMsgDataFieldNumber;
#endif  // !_MSC_VER

PeerCategoryResponse::PeerCategoryResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMChat.PeerCategoryResponse)
}

void PeerCategoryResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PeerCategoryResponse::PeerCategoryResponse(const PeerCategoryResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMChat.PeerCategoryResponse)
}

void PeerCategoryResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  categorycount_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PeerCategoryResponse::~PeerCategoryResponse() {
  // @@protoc_insertion_point(destructor:IMChat.PeerCategoryResponse)
  SharedDtor();
}

void PeerCategoryResponse::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PeerCategoryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeerCategoryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeerCategoryResponse_descriptor_;
}

const PeerCategoryResponse& PeerCategoryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageChat_2eproto();
  return *default_instance_;
}

PeerCategoryResponse* PeerCategoryResponse::default_instance_ = NULL;

PeerCategoryResponse* PeerCategoryResponse::New(::google::protobuf::Arena* arena) const {
  PeerCategoryResponse* n = new PeerCategoryResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeerCategoryResponse::Clear() {
  timestamp_ = GOOGLE_LONGLONG(0);
  categorycount_ = 0;
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgdata_.Clear();
}

bool PeerCategoryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMChat.PeerCategoryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_categoryCount;
        break;
      }

      // optional int32 categoryCount = 2;
      case 2: {
        if (tag == 16) {
         parse_categoryCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &categorycount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_userID;
        break;
      }

      // optional string userID = 3;
      case 3: {
        if (tag == 26) {
         parse_userID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.PeerCategoryResponse.userID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msgData;
        break;
      }

      // repeated .IMChat.PeerCategoryResponse.idCategory msgData = 4;
      case 4: {
        if (tag == 34) {
         parse_msgData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msgdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msgData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMChat.PeerCategoryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMChat.PeerCategoryResponse)
  return false;
#undef DO_
}

void PeerCategoryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMChat.PeerCategoryResponse)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional int32 categoryCount = 2;
  if (this->categorycount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->categorycount(), output);
  }

  // optional string userID = 3;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.PeerCategoryResponse.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->userid(), output);
  }

  // repeated .IMChat.PeerCategoryResponse.idCategory msgData = 4;
  for (unsigned int i = 0, n = this->msgdata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->msgdata(i), output);
  }

  // @@protoc_insertion_point(serialize_end:IMChat.PeerCategoryResponse)
}

::google::protobuf::uint8* PeerCategoryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMChat.PeerCategoryResponse)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional int32 categoryCount = 2;
  if (this->categorycount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->categorycount(), target);
  }

  // optional string userID = 3;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.PeerCategoryResponse.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userid(), target);
  }

  // repeated .IMChat.PeerCategoryResponse.idCategory msgData = 4;
  for (unsigned int i = 0, n = this->msgdata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->msgdata(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IMChat.PeerCategoryResponse)
  return target;
}

int PeerCategoryResponse::ByteSize() const {
  int total_size = 0;

  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional int32 categoryCount = 2;
  if (this->categorycount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->categorycount());
  }

  // optional string userID = 3;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // repeated .IMChat.PeerCategoryResponse.idCategory msgData = 4;
  total_size += 1 * this->msgdata_size();
  for (int i = 0; i < this->msgdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msgdata(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerCategoryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PeerCategoryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PeerCategoryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeerCategoryResponse::MergeFrom(const PeerCategoryResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  msgdata_.MergeFrom(from.msgdata_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.categorycount() != 0) {
    set_categorycount(from.categorycount());
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
}

void PeerCategoryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerCategoryResponse::CopyFrom(const PeerCategoryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerCategoryResponse::IsInitialized() const {

  return true;
}

void PeerCategoryResponse::Swap(PeerCategoryResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerCategoryResponse::InternalSwap(PeerCategoryResponse* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(categorycount_, other->categorycount_);
  userid_.Swap(&other->userid_);
  msgdata_.UnsafeArenaSwap(&other->msgdata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PeerCategoryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeerCategoryResponse_descriptor_;
  metadata.reflection = PeerCategoryResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupAllRequest::kTimestampFieldNumber;
const int GroupAllRequest::kUserIDFieldNumber;
#endif  // !_MSC_VER

GroupAllRequest::GroupAllRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMChat.GroupAllRequest)
}

void GroupAllRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupAllRequest::GroupAllRequest(const GroupAllRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMChat.GroupAllRequest)
}

void GroupAllRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GroupAllRequest::~GroupAllRequest() {
  // @@protoc_insertion_point(destructor:IMChat.GroupAllRequest)
  SharedDtor();
}

void GroupAllRequest::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GroupAllRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupAllRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupAllRequest_descriptor_;
}

const GroupAllRequest& GroupAllRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageChat_2eproto();
  return *default_instance_;
}

GroupAllRequest* GroupAllRequest::default_instance_ = NULL;

GroupAllRequest* GroupAllRequest::New(::google::protobuf::Arena* arena) const {
  GroupAllRequest* n = new GroupAllRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupAllRequest::Clear() {
  timestamp_ = GOOGLE_LONGLONG(0);
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GroupAllRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMChat.GroupAllRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_userID;
        break;
      }

      // optional string userID = 2;
      case 2: {
        if (tag == 18) {
         parse_userID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.GroupAllRequest.userID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMChat.GroupAllRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMChat.GroupAllRequest)
  return false;
#undef DO_
}

void GroupAllRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMChat.GroupAllRequest)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.GroupAllRequest.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:IMChat.GroupAllRequest)
}

::google::protobuf::uint8* GroupAllRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMChat.GroupAllRequest)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.GroupAllRequest.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IMChat.GroupAllRequest)
  return target;
}

int GroupAllRequest::ByteSize() const {
  int total_size = 0;

  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupAllRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GroupAllRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupAllRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupAllRequest::MergeFrom(const GroupAllRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
}

void GroupAllRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupAllRequest::CopyFrom(const GroupAllRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupAllRequest::IsInitialized() const {

  return true;
}

void GroupAllRequest::Swap(GroupAllRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupAllRequest::InternalSwap(GroupAllRequest* other) {
  std::swap(timestamp_, other->timestamp_);
  userid_.Swap(&other->userid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroupAllRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupAllRequest_descriptor_;
  metadata.reflection = GroupAllRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupInfo::kGroupIDFieldNumber;
const int GroupInfo::kGroupNameFieldNumber;
const int GroupInfo::kImageUrlFieldNumber;
#endif  // !_MSC_VER

GroupInfo::GroupInfo()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMChat.GroupInfo)
}

void GroupInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupInfo::GroupInfo(const GroupInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMChat.GroupInfo)
}

void GroupInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GroupInfo::~GroupInfo() {
  // @@protoc_insertion_point(destructor:IMChat.GroupInfo)
  SharedDtor();
}

void GroupInfo::SharedDtor() {
  groupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GroupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupInfo_descriptor_;
}

const GroupInfo& GroupInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageChat_2eproto();
  return *default_instance_;
}

GroupInfo* GroupInfo::default_instance_ = NULL;

GroupInfo* GroupInfo::New(::google::protobuf::Arena* arena) const {
  GroupInfo* n = new GroupInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupInfo::Clear() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMChat.GroupInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string groupID = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), this->groupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.GroupInfo.groupID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_groupName;
        break;
      }

      // optional string groupName = 3;
      case 3: {
        if (tag == 26) {
         parse_groupName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupname().data(), this->groupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.GroupInfo.groupName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_image_url;
        break;
      }

      // optional string image_url = 4;
      case 4: {
        if (tag == 34) {
         parse_image_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image_url().data(), this->image_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.GroupInfo.image_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMChat.GroupInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMChat.GroupInfo)
  return false;
#undef DO_
}

void GroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMChat.GroupInfo)
  // optional string groupID = 2;
  if (this->groupid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.GroupInfo.groupID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->groupid(), output);
  }

  // optional string groupName = 3;
  if (this->groupname().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.GroupInfo.groupName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->groupname(), output);
  }

  // optional string image_url = 4;
  if (this->image_url().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_url().data(), this->image_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.GroupInfo.image_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->image_url(), output);
  }

  // @@protoc_insertion_point(serialize_end:IMChat.GroupInfo)
}

::google::protobuf::uint8* GroupInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMChat.GroupInfo)
  // optional string groupID = 2;
  if (this->groupid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.GroupInfo.groupID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupid(), target);
  }

  // optional string groupName = 3;
  if (this->groupname().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.GroupInfo.groupName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->groupname(), target);
  }

  // optional string image_url = 4;
  if (this->image_url().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_url().data(), this->image_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.GroupInfo.image_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->image_url(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IMChat.GroupInfo)
  return target;
}

int GroupInfo::ByteSize() const {
  int total_size = 0;

  // optional string groupID = 2;
  if (this->groupid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());
  }

  // optional string groupName = 3;
  if (this->groupname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupname());
  }

  // optional string image_url = 4;
  if (this->image_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image_url());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GroupInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupInfo::MergeFrom(const GroupInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.groupid().size() > 0) {

    groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
  }
  if (from.groupname().size() > 0) {

    groupname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupname_);
  }
  if (from.image_url().size() > 0) {

    image_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_url_);
  }
}

void GroupInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupInfo::CopyFrom(const GroupInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupInfo::IsInitialized() const {

  return true;
}

void GroupInfo::Swap(GroupInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupInfo::InternalSwap(GroupInfo* other) {
  groupid_.Swap(&other->groupid_);
  groupname_.Swap(&other->groupname_);
  image_url_.Swap(&other->image_url_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroupInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupInfo_descriptor_;
  metadata.reflection = GroupInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupAllResponse::kTimestampFieldNumber;
const int GroupAllResponse::kGroupCountFieldNumber;
const int GroupAllResponse::kUserIDFieldNumber;
const int GroupAllResponse::kMsgDataFieldNumber;
#endif  // !_MSC_VER

GroupAllResponse::GroupAllResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMChat.GroupAllResponse)
}

void GroupAllResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupAllResponse::GroupAllResponse(const GroupAllResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMChat.GroupAllResponse)
}

void GroupAllResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  groupcount_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GroupAllResponse::~GroupAllResponse() {
  // @@protoc_insertion_point(destructor:IMChat.GroupAllResponse)
  SharedDtor();
}

void GroupAllResponse::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GroupAllResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupAllResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupAllResponse_descriptor_;
}

const GroupAllResponse& GroupAllResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageChat_2eproto();
  return *default_instance_;
}

GroupAllResponse* GroupAllResponse::default_instance_ = NULL;

GroupAllResponse* GroupAllResponse::New(::google::protobuf::Arena* arena) const {
  GroupAllResponse* n = new GroupAllResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupAllResponse::Clear() {
  timestamp_ = GOOGLE_LONGLONG(0);
  groupcount_ = 0;
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgdata_.Clear();
}

bool GroupAllResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMChat.GroupAllResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_groupCount;
        break;
      }

      // optional int32 groupCount = 2;
      case 2: {
        if (tag == 16) {
         parse_groupCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupcount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_userID;
        break;
      }

      // optional string userID = 3;
      case 3: {
        if (tag == 26) {
         parse_userID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.GroupAllResponse.userID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msgData;
        break;
      }

      // repeated .IMChat.GroupInfo msgData = 4;
      case 4: {
        if (tag == 34) {
         parse_msgData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msgdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msgData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMChat.GroupAllResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMChat.GroupAllResponse)
  return false;
#undef DO_
}

void GroupAllResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMChat.GroupAllResponse)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional int32 groupCount = 2;
  if (this->groupcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupcount(), output);
  }

  // optional string userID = 3;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.GroupAllResponse.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->userid(), output);
  }

  // repeated .IMChat.GroupInfo msgData = 4;
  for (unsigned int i = 0, n = this->msgdata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->msgdata(i), output);
  }

  // @@protoc_insertion_point(serialize_end:IMChat.GroupAllResponse)
}

::google::protobuf::uint8* GroupAllResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMChat.GroupAllResponse)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional int32 groupCount = 2;
  if (this->groupcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupcount(), target);
  }

  // optional string userID = 3;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.GroupAllResponse.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userid(), target);
  }

  // repeated .IMChat.GroupInfo msgData = 4;
  for (unsigned int i = 0, n = this->msgdata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->msgdata(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IMChat.GroupAllResponse)
  return target;
}

int GroupAllResponse::ByteSize() const {
  int total_size = 0;

  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional int32 groupCount = 2;
  if (this->groupcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->groupcount());
  }

  // optional string userID = 3;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // repeated .IMChat.GroupInfo msgData = 4;
  total_size += 1 * this->msgdata_size();
  for (int i = 0; i < this->msgdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msgdata(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupAllResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GroupAllResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupAllResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupAllResponse::MergeFrom(const GroupAllResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  msgdata_.MergeFrom(from.msgdata_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.groupcount() != 0) {
    set_groupcount(from.groupcount());
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
}

void GroupAllResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupAllResponse::CopyFrom(const GroupAllResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupAllResponse::IsInitialized() const {

  return true;
}

void GroupAllResponse::Swap(GroupAllResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupAllResponse::InternalSwap(GroupAllResponse* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(groupcount_, other->groupcount_);
  userid_.Swap(&other->userid_);
  msgdata_.UnsafeArenaSwap(&other->msgdata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroupAllResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupAllResponse_descriptor_;
  metadata.reflection = GroupAllResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupMemberInfo::kUserIDFieldNumber;
const int GroupMemberInfo::kNickNameFieldNumber;
const int GroupMemberInfo::kImageUrlFieldNumber;
const int GroupMemberInfo::kOnlineStatusFieldNumber;
#endif  // !_MSC_VER

GroupMemberInfo::GroupMemberInfo()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMChat.GroupMemberInfo)
}

void GroupMemberInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupMemberInfo::GroupMemberInfo(const GroupMemberInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMChat.GroupMemberInfo)
}

void GroupMemberInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  online_status_ = 0;
}

GroupMemberInfo::~GroupMemberInfo() {
  // @@protoc_insertion_point(destructor:IMChat.GroupMemberInfo)
  SharedDtor();
}

void GroupMemberInfo::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GroupMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupMemberInfo_descriptor_;
}

const GroupMemberInfo& GroupMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageChat_2eproto();
  return *default_instance_;
}

GroupMemberInfo* GroupMemberInfo::default_instance_ = NULL;

GroupMemberInfo* GroupMemberInfo::New(::google::protobuf::Arena* arena) const {
  GroupMemberInfo* n = new GroupMemberInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupMemberInfo::Clear() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  online_status_ = 0;
}

bool GroupMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMChat.GroupMemberInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string userID = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.GroupMemberInfo.userID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 3;
      case 3: {
        if (tag == 26) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.GroupMemberInfo.nick_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_image_url;
        break;
      }

      // optional string image_url = 4;
      case 4: {
        if (tag == 34) {
         parse_image_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image_url().data(), this->image_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.GroupMemberInfo.image_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_online_status;
        break;
      }

      // optional int32 online_status = 5;
      case 5: {
        if (tag == 40) {
         parse_online_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMChat.GroupMemberInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMChat.GroupMemberInfo)
  return false;
#undef DO_
}

void GroupMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMChat.GroupMemberInfo)
  // optional string userID = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.GroupMemberInfo.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  // optional string nick_name = 3;
  if (this->nick_name().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.GroupMemberInfo.nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->nick_name(), output);
  }

  // optional string image_url = 4;
  if (this->image_url().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_url().data(), this->image_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.GroupMemberInfo.image_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->image_url(), output);
  }

  // optional int32 online_status = 5;
  if (this->online_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->online_status(), output);
  }

  // @@protoc_insertion_point(serialize_end:IMChat.GroupMemberInfo)
}

::google::protobuf::uint8* GroupMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMChat.GroupMemberInfo)
  // optional string userID = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.GroupMemberInfo.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  // optional string nick_name = 3;
  if (this->nick_name().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.GroupMemberInfo.nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nick_name(), target);
  }

  // optional string image_url = 4;
  if (this->image_url().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_url().data(), this->image_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.GroupMemberInfo.image_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->image_url(), target);
  }

  // optional int32 online_status = 5;
  if (this->online_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->online_status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IMChat.GroupMemberInfo)
  return target;
}

int GroupMemberInfo::ByteSize() const {
  int total_size = 0;

  // optional string userID = 2;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional string nick_name = 3;
  if (this->nick_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nick_name());
  }

  // optional string image_url = 4;
  if (this->image_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->image_url());
  }

  // optional int32 online_status = 5;
  if (this->online_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->online_status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GroupMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupMemberInfo::MergeFrom(const GroupMemberInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.nick_name().size() > 0) {

    nick_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_name_);
  }
  if (from.image_url().size() > 0) {

    image_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_url_);
  }
  if (from.online_status() != 0) {
    set_online_status(from.online_status());
  }
}

void GroupMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupMemberInfo::CopyFrom(const GroupMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMemberInfo::IsInitialized() const {

  return true;
}

void GroupMemberInfo::Swap(GroupMemberInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupMemberInfo::InternalSwap(GroupMemberInfo* other) {
  userid_.Swap(&other->userid_);
  nick_name_.Swap(&other->nick_name_);
  image_url_.Swap(&other->image_url_);
  std::swap(online_status_, other->online_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroupMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupMemberInfo_descriptor_;
  metadata.reflection = GroupMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupMembeRequest::kTimestampFieldNumber;
const int GroupMembeRequest::kGroupIDFieldNumber;
const int GroupMembeRequest::kUserIDFieldNumber;
#endif  // !_MSC_VER

GroupMembeRequest::GroupMembeRequest()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMChat.GroupMembeRequest)
}

void GroupMembeRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupMembeRequest::GroupMembeRequest(const GroupMembeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMChat.GroupMembeRequest)
}

void GroupMembeRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GroupMembeRequest::~GroupMembeRequest() {
  // @@protoc_insertion_point(destructor:IMChat.GroupMembeRequest)
  SharedDtor();
}

void GroupMembeRequest::SharedDtor() {
  groupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GroupMembeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupMembeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupMembeRequest_descriptor_;
}

const GroupMembeRequest& GroupMembeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageChat_2eproto();
  return *default_instance_;
}

GroupMembeRequest* GroupMembeRequest::default_instance_ = NULL;

GroupMembeRequest* GroupMembeRequest::New(::google::protobuf::Arena* arena) const {
  GroupMembeRequest* n = new GroupMembeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupMembeRequest::Clear() {
  timestamp_ = GOOGLE_LONGLONG(0);
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool GroupMembeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMChat.GroupMembeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_groupID;
        break;
      }

      // optional string groupID = 2;
      case 2: {
        if (tag == 18) {
         parse_groupID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), this->groupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.GroupMembeRequest.groupID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_userID;
        break;
      }

      // optional string userID = 3;
      case 3: {
        if (tag == 26) {
         parse_userID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.GroupMembeRequest.userID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMChat.GroupMembeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMChat.GroupMembeRequest)
  return false;
#undef DO_
}

void GroupMembeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMChat.GroupMembeRequest)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional string groupID = 2;
  if (this->groupid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.GroupMembeRequest.groupID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->groupid(), output);
  }

  // optional string userID = 3;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.GroupMembeRequest.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->userid(), output);
  }

  // @@protoc_insertion_point(serialize_end:IMChat.GroupMembeRequest)
}

::google::protobuf::uint8* GroupMembeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMChat.GroupMembeRequest)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional string groupID = 2;
  if (this->groupid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.GroupMembeRequest.groupID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupid(), target);
  }

  // optional string userID = 3;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.GroupMembeRequest.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IMChat.GroupMembeRequest)
  return target;
}

int GroupMembeRequest::ByteSize() const {
  int total_size = 0;

  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional string groupID = 2;
  if (this->groupid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());
  }

  // optional string userID = 3;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupMembeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GroupMembeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupMembeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupMembeRequest::MergeFrom(const GroupMembeRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.groupid().size() > 0) {

    groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
}

void GroupMembeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupMembeRequest::CopyFrom(const GroupMembeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMembeRequest::IsInitialized() const {

  return true;
}

void GroupMembeRequest::Swap(GroupMembeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupMembeRequest::InternalSwap(GroupMembeRequest* other) {
  std::swap(timestamp_, other->timestamp_);
  groupid_.Swap(&other->groupid_);
  userid_.Swap(&other->userid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroupMembeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupMembeRequest_descriptor_;
  metadata.reflection = GroupMembeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupMemberResponse::kTimestampFieldNumber;
const int GroupMemberResponse::kMemberCountFieldNumber;
const int GroupMemberResponse::kUserIDFieldNumber;
const int GroupMemberResponse::kGroupIDFieldNumber;
const int GroupMemberResponse::kMsgDataFieldNumber;
#endif  // !_MSC_VER

GroupMemberResponse::GroupMemberResponse()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMChat.GroupMemberResponse)
}

void GroupMemberResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GroupMemberResponse::GroupMemberResponse(const GroupMemberResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMChat.GroupMemberResponse)
}

void GroupMemberResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  membercount_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GroupMemberResponse::~GroupMemberResponse() {
  // @@protoc_insertion_point(destructor:IMChat.GroupMemberResponse)
  SharedDtor();
}

void GroupMemberResponse::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GroupMemberResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupMemberResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupMemberResponse_descriptor_;
}

const GroupMemberResponse& GroupMemberResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageChat_2eproto();
  return *default_instance_;
}

GroupMemberResponse* GroupMemberResponse::default_instance_ = NULL;

GroupMemberResponse* GroupMemberResponse::New(::google::protobuf::Arena* arena) const {
  GroupMemberResponse* n = new GroupMemberResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GroupMemberResponse::Clear() {
  timestamp_ = GOOGLE_LONGLONG(0);
  membercount_ = 0;
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgdata_.Clear();
}

bool GroupMemberResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMChat.GroupMemberResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_memberCount;
        break;
      }

      // optional int32 memberCount = 2;
      case 2: {
        if (tag == 16) {
         parse_memberCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &membercount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_userID;
        break;
      }

      // optional string userID = 3;
      case 3: {
        if (tag == 26) {
         parse_userID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.GroupMemberResponse.userID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_groupID;
        break;
      }

      // optional string groupID = 4;
      case 4: {
        if (tag == 34) {
         parse_groupID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), this->groupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMChat.GroupMemberResponse.groupID");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_msgData;
        break;
      }

      // repeated .IMChat.GroupMemberInfo msgData = 5;
      case 5: {
        if (tag == 42) {
         parse_msgData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msgdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_msgData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMChat.GroupMemberResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMChat.GroupMemberResponse)
  return false;
#undef DO_
}

void GroupMemberResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMChat.GroupMemberResponse)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional int32 memberCount = 2;
  if (this->membercount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->membercount(), output);
  }

  // optional string userID = 3;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.GroupMemberResponse.userID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->userid(), output);
  }

  // optional string groupID = 4;
  if (this->groupid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.GroupMemberResponse.groupID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->groupid(), output);
  }

  // repeated .IMChat.GroupMemberInfo msgData = 5;
  for (unsigned int i = 0, n = this->msgdata_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->msgdata(i), output);
  }

  // @@protoc_insertion_point(serialize_end:IMChat.GroupMemberResponse)
}

::google::protobuf::uint8* GroupMemberResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMChat.GroupMemberResponse)
  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional int32 memberCount = 2;
  if (this->membercount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->membercount(), target);
  }

  // optional string userID = 3;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.GroupMemberResponse.userID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userid(), target);
  }

  // optional string groupID = 4;
  if (this->groupid().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMChat.GroupMemberResponse.groupID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->groupid(), target);
  }

  // repeated .IMChat.GroupMemberInfo msgData = 5;
  for (unsigned int i = 0, n = this->msgdata_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->msgdata(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IMChat.GroupMemberResponse)
  return target;
}

int GroupMemberResponse::ByteSize() const {
  int total_size = 0;

  // optional int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional int32 memberCount = 2;
  if (this->membercount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->membercount());
  }

  // optional string userID = 3;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // optional string groupID = 4;
  if (this->groupid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());
  }

  // repeated .IMChat.GroupMemberInfo msgData = 5;
  total_size += 1 * this->msgdata_size();
  for (int i = 0; i < this->msgdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msgdata(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupMemberResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GroupMemberResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupMemberResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupMemberResponse::MergeFrom(const GroupMemberResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  msgdata_.MergeFrom(from.msgdata_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.membercount() != 0) {
    set_membercount(from.membercount());
  }
  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.groupid().size() > 0) {

    groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
  }
}

void GroupMemberResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupMemberResponse::CopyFrom(const GroupMemberResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupMemberResponse::IsInitialized() const {

  return true;
}

void GroupMemberResponse::Swap(GroupMemberResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupMemberResponse::InternalSwap(GroupMemberResponse* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(membercount_, other->membercount_);
  userid_.Swap(&other->userid_);
  groupid_.Swap(&other->groupid_);
  msgdata_.UnsafeArenaSwap(&other->msgdata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GroupMemberResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupMemberResponse_descriptor_;
  metadata.reflection = GroupMemberResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace IMChat

// @@protoc_insertion_point(global_scope)
