// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageChat.proto

#ifndef PROTOBUF_MessageChat_2eproto__INCLUDED
#define PROTOBUF_MessageChat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace IMChat {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_MessageChat_2eproto();
void protobuf_AssignDesc_MessageChat_2eproto();
void protobuf_ShutdownFile_MessageChat_2eproto();

class shakeHandleReq;
class shakeHandleRes;
class UserData;
class MsgData;
class UnreadMsgRequest;
class UnreadMsgResponse;
class PeerOnlineNotify;
class PeerStatusNotify;
class PeerUserInfoRequest;
class PeerUserInfoResponse;
class PeerAllUserInfoRequest;
class PeerAllUserInfoResponse;
class PeerCategoryRequest;
class PeerCategoryResponse;
class PeerCategoryResponse_idCategory;
class GroupAllRequest;
class GroupInfo;
class GroupAllResponse;
class GroupMemberInfo;
class GroupMembeRequest;
class GroupMemberResponse;

enum MsgData_MSGTYPE {
  MsgData_MSGTYPE_CHAT_TEXT = 0,
  MsgData_MSGTYPE_CHAT_AUDIO = 1,
  MsgData_MSGTYPE_GROUPCHAT_TEXT = 2,
  MsgData_MSGTYPE_GROUPCHAT_AUDIO = 3,
  MsgData_MSGTYPE_MsgData_MSGTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MsgData_MSGTYPE_MsgData_MSGTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MsgData_MSGTYPE_IsValid(int value);
const MsgData_MSGTYPE MsgData_MSGTYPE_MSGTYPE_MIN = MsgData_MSGTYPE_CHAT_TEXT;
const MsgData_MSGTYPE MsgData_MSGTYPE_MSGTYPE_MAX = MsgData_MSGTYPE_GROUPCHAT_AUDIO;
const int MsgData_MSGTYPE_MSGTYPE_ARRAYSIZE = MsgData_MSGTYPE_MSGTYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgData_MSGTYPE_descriptor();
inline const ::std::string& MsgData_MSGTYPE_Name(MsgData_MSGTYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgData_MSGTYPE_descriptor(), value);
}
inline bool MsgData_MSGTYPE_Parse(
    const ::std::string& name, MsgData_MSGTYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgData_MSGTYPE>(
    MsgData_MSGTYPE_descriptor(), name, value);
}
// ===================================================================

class shakeHandleReq : public ::google::protobuf::Message {
 public:
  shakeHandleReq();
  virtual ~shakeHandleReq();

  shakeHandleReq(const shakeHandleReq& from);

  inline shakeHandleReq& operator=(const shakeHandleReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const shakeHandleReq& default_instance();

  void Swap(shakeHandleReq* other);

  // implements Message ----------------------------------------------

  inline shakeHandleReq* New() const { return New(NULL); }

  shakeHandleReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const shakeHandleReq& from);
  void MergeFrom(const shakeHandleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(shakeHandleReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional string userID = 2;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 2;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:IMChat.shakeHandleReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageChat_2eproto();
  friend void protobuf_AssignDesc_MessageChat_2eproto();
  friend void protobuf_ShutdownFile_MessageChat_2eproto();

  void InitAsDefaultInstance();
  static shakeHandleReq* default_instance_;
};
// -------------------------------------------------------------------

class shakeHandleRes : public ::google::protobuf::Message {
 public:
  shakeHandleRes();
  virtual ~shakeHandleRes();

  shakeHandleRes(const shakeHandleRes& from);

  inline shakeHandleRes& operator=(const shakeHandleRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const shakeHandleRes& default_instance();

  void Swap(shakeHandleRes* other);

  // implements Message ----------------------------------------------

  inline shakeHandleRes* New() const { return New(NULL); }

  shakeHandleRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const shakeHandleRes& from);
  void MergeFrom(const shakeHandleRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(shakeHandleRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional sint32 result = 2;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:IMChat.shakeHandleRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageChat_2eproto();
  friend void protobuf_AssignDesc_MessageChat_2eproto();
  friend void protobuf_ShutdownFile_MessageChat_2eproto();

  void InitAsDefaultInstance();
  static shakeHandleRes* default_instance_;
};
// -------------------------------------------------------------------

class UserData : public ::google::protobuf::Message {
 public:
  UserData();
  virtual ~UserData();

  UserData(const UserData& from);

  inline UserData& operator=(const UserData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserData& default_instance();

  void Swap(UserData* other);

  // implements Message ----------------------------------------------

  inline UserData* New() const { return New(NULL); }

  UserData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserData& from);
  void MergeFrom(const UserData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint32 online_status = 1;
  inline void clear_online_status();
  static const int kOnlineStatusFieldNumber = 1;
  inline ::google::protobuf::int32 online_status() const;
  inline void set_online_status(::google::protobuf::int32 value);

  // optional int64 timestamp = 2;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional string user_id = 3;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 3;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const char* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  inline void set_allocated_user_id(::std::string* user_id);

  // optional string name = 4;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string nick_name = 5;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 5;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // optional string image_url = 6;
  inline void clear_image_url();
  static const int kImageUrlFieldNumber = 6;
  inline const ::std::string& image_url() const;
  inline void set_image_url(const ::std::string& value);
  inline void set_image_url(const char* value);
  inline void set_image_url(const char* value, size_t size);
  inline ::std::string* mutable_image_url();
  inline ::std::string* release_image_url();
  inline void set_allocated_image_url(::std::string* image_url);

  // optional string position = 7;
  inline void clear_position();
  static const int kPositionFieldNumber = 7;
  inline const ::std::string& position() const;
  inline void set_position(const ::std::string& value);
  inline void set_position(const char* value);
  inline void set_position(const char* value, size_t size);
  inline ::std::string* mutable_position();
  inline ::std::string* release_position();
  inline void set_allocated_position(::std::string* position);

  // optional string email = 8;
  inline void clear_email();
  static const int kEmailFieldNumber = 8;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // optional sint32 sex = 9;
  inline void clear_sex();
  static const int kSexFieldNumber = 9;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:IMChat.UserData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::internal::ArenaStringPtr user_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr nick_name_;
  ::google::protobuf::int32 online_status_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::internal::ArenaStringPtr image_url_;
  ::google::protobuf::internal::ArenaStringPtr position_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageChat_2eproto();
  friend void protobuf_AssignDesc_MessageChat_2eproto();
  friend void protobuf_ShutdownFile_MessageChat_2eproto();

  void InitAsDefaultInstance();
  static UserData* default_instance_;
};
// -------------------------------------------------------------------

class MsgData : public ::google::protobuf::Message {
 public:
  MsgData();
  virtual ~MsgData();

  MsgData(const MsgData& from);

  inline MsgData& operator=(const MsgData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgData& default_instance();

  void Swap(MsgData* other);

  // implements Message ----------------------------------------------

  inline MsgData* New() const { return New(NULL); }

  MsgData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgData& from);
  void MergeFrom(const MsgData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MsgData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MsgData_MSGTYPE MSGTYPE;
  static const MSGTYPE CHAT_TEXT = MsgData_MSGTYPE_CHAT_TEXT;
  static const MSGTYPE CHAT_AUDIO = MsgData_MSGTYPE_CHAT_AUDIO;
  static const MSGTYPE GROUPCHAT_TEXT = MsgData_MSGTYPE_GROUPCHAT_TEXT;
  static const MSGTYPE GROUPCHAT_AUDIO = MsgData_MSGTYPE_GROUPCHAT_AUDIO;
  static inline bool MSGTYPE_IsValid(int value) {
    return MsgData_MSGTYPE_IsValid(value);
  }
  static const MSGTYPE MSGTYPE_MIN =
    MsgData_MSGTYPE_MSGTYPE_MIN;
  static const MSGTYPE MSGTYPE_MAX =
    MsgData_MSGTYPE_MSGTYPE_MAX;
  static const int MSGTYPE_ARRAYSIZE =
    MsgData_MSGTYPE_MSGTYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGTYPE_descriptor() {
    return MsgData_MSGTYPE_descriptor();
  }
  static inline const ::std::string& MSGTYPE_Name(MSGTYPE value) {
    return MsgData_MSGTYPE_Name(value);
  }
  static inline bool MSGTYPE_Parse(const ::std::string& name,
      MSGTYPE* value) {
    return MsgData_MSGTYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional fixed32 SequenceNumber = 2;
  inline void clear_sequencenumber();
  static const int kSequenceNumberFieldNumber = 2;
  inline ::google::protobuf::uint32 sequencenumber() const;
  inline void set_sequencenumber(::google::protobuf::uint32 value);

  // optional string fromId = 3;
  inline void clear_fromid();
  static const int kFromIdFieldNumber = 3;
  inline const ::std::string& fromid() const;
  inline void set_fromid(const ::std::string& value);
  inline void set_fromid(const char* value);
  inline void set_fromid(const char* value, size_t size);
  inline ::std::string* mutable_fromid();
  inline ::std::string* release_fromid();
  inline void set_allocated_fromid(::std::string* fromid);

  // optional string toID = 4;
  inline void clear_toid();
  static const int kToIDFieldNumber = 4;
  inline const ::std::string& toid() const;
  inline void set_toid(const ::std::string& value);
  inline void set_toid(const char* value);
  inline void set_toid(const char* value, size_t size);
  inline ::std::string* mutable_toid();
  inline ::std::string* release_toid();
  inline void set_allocated_toid(::std::string* toid);

  // optional bytes msgData = 5;
  inline void clear_msgdata();
  static const int kMsgDataFieldNumber = 5;
  inline const ::std::string& msgdata() const;
  inline void set_msgdata(const ::std::string& value);
  inline void set_msgdata(const char* value);
  inline void set_msgdata(const void* value, size_t size);
  inline ::std::string* mutable_msgdata();
  inline ::std::string* release_msgdata();
  inline void set_allocated_msgdata(::std::string* msgdata);

  // optional .IMChat.MsgData.MSGTYPE type = 6;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::IMChat::MsgData_MSGTYPE type() const;
  inline void set_type(::IMChat::MsgData_MSGTYPE value);

  // @@protoc_insertion_point(class_scope:IMChat.MsgData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::internal::ArenaStringPtr fromid_;
  ::google::protobuf::internal::ArenaStringPtr toid_;
  ::google::protobuf::uint32 sequencenumber_;
  int type_;
  ::google::protobuf::internal::ArenaStringPtr msgdata_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageChat_2eproto();
  friend void protobuf_AssignDesc_MessageChat_2eproto();
  friend void protobuf_ShutdownFile_MessageChat_2eproto();

  void InitAsDefaultInstance();
  static MsgData* default_instance_;
};
// -------------------------------------------------------------------

class UnreadMsgRequest : public ::google::protobuf::Message {
 public:
  UnreadMsgRequest();
  virtual ~UnreadMsgRequest();

  UnreadMsgRequest(const UnreadMsgRequest& from);

  inline UnreadMsgRequest& operator=(const UnreadMsgRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnreadMsgRequest& default_instance();

  void Swap(UnreadMsgRequest* other);

  // implements Message ----------------------------------------------

  inline UnreadMsgRequest* New() const { return New(NULL); }

  UnreadMsgRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnreadMsgRequest& from);
  void MergeFrom(const UnreadMsgRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UnreadMsgRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string userId = 1;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 1;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // optional int64 timestamp = 2;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:IMChat.UnreadMsgRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::int64 timestamp_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageChat_2eproto();
  friend void protobuf_AssignDesc_MessageChat_2eproto();
  friend void protobuf_ShutdownFile_MessageChat_2eproto();

  void InitAsDefaultInstance();
  static UnreadMsgRequest* default_instance_;
};
// -------------------------------------------------------------------

class UnreadMsgResponse : public ::google::protobuf::Message {
 public:
  UnreadMsgResponse();
  virtual ~UnreadMsgResponse();

  UnreadMsgResponse(const UnreadMsgResponse& from);

  inline UnreadMsgResponse& operator=(const UnreadMsgResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnreadMsgResponse& default_instance();

  void Swap(UnreadMsgResponse* other);

  // implements Message ----------------------------------------------

  inline UnreadMsgResponse* New() const { return New(NULL); }

  UnreadMsgResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnreadMsgResponse& from);
  void MergeFrom(const UnreadMsgResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UnreadMsgResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 msgCount = 1;
  inline void clear_msgcount();
  static const int kMsgCountFieldNumber = 1;
  inline ::google::protobuf::int32 msgcount() const;
  inline void set_msgcount(::google::protobuf::int32 value);

  // optional int64 timestamp = 2;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional string userID = 3;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 3;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // repeated bytes msgData = 4;
  inline int msgdata_size() const;
  inline void clear_msgdata();
  static const int kMsgDataFieldNumber = 4;
  inline const ::std::string& msgdata(int index) const;
  inline ::std::string* mutable_msgdata(int index);
  inline void set_msgdata(int index, const ::std::string& value);
  inline void set_msgdata(int index, const char* value);
  inline void set_msgdata(int index, const void* value, size_t size);
  inline ::std::string* add_msgdata();
  inline void add_msgdata(const ::std::string& value);
  inline void add_msgdata(const char* value);
  inline void add_msgdata(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& msgdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_msgdata();

  // @@protoc_insertion_point(class_scope:IMChat.UnreadMsgResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> msgdata_;
  ::google::protobuf::int32 msgcount_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageChat_2eproto();
  friend void protobuf_AssignDesc_MessageChat_2eproto();
  friend void protobuf_ShutdownFile_MessageChat_2eproto();

  void InitAsDefaultInstance();
  static UnreadMsgResponse* default_instance_;
};
// -------------------------------------------------------------------

class PeerOnlineNotify : public ::google::protobuf::Message {
 public:
  PeerOnlineNotify();
  virtual ~PeerOnlineNotify();

  PeerOnlineNotify(const PeerOnlineNotify& from);

  inline PeerOnlineNotify& operator=(const PeerOnlineNotify& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerOnlineNotify& default_instance();

  void Swap(PeerOnlineNotify* other);

  // implements Message ----------------------------------------------

  inline PeerOnlineNotify* New() const { return New(NULL); }

  PeerOnlineNotify* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PeerOnlineNotify& from);
  void MergeFrom(const PeerOnlineNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeerOnlineNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 onlineCount = 1;
  inline void clear_onlinecount();
  static const int kOnlineCountFieldNumber = 1;
  inline ::google::protobuf::int32 onlinecount() const;
  inline void set_onlinecount(::google::protobuf::int32 value);

  // optional int64 timestamp = 2;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional string userID = 3;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 3;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // repeated string msgData = 4;
  inline int msgdata_size() const;
  inline void clear_msgdata();
  static const int kMsgDataFieldNumber = 4;
  inline const ::std::string& msgdata(int index) const;
  inline ::std::string* mutable_msgdata(int index);
  inline void set_msgdata(int index, const ::std::string& value);
  inline void set_msgdata(int index, const char* value);
  inline void set_msgdata(int index, const char* value, size_t size);
  inline ::std::string* add_msgdata();
  inline void add_msgdata(const ::std::string& value);
  inline void add_msgdata(const char* value);
  inline void add_msgdata(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& msgdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_msgdata();

  // @@protoc_insertion_point(class_scope:IMChat.PeerOnlineNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> msgdata_;
  ::google::protobuf::int32 onlinecount_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageChat_2eproto();
  friend void protobuf_AssignDesc_MessageChat_2eproto();
  friend void protobuf_ShutdownFile_MessageChat_2eproto();

  void InitAsDefaultInstance();
  static PeerOnlineNotify* default_instance_;
};
// -------------------------------------------------------------------

class PeerStatusNotify : public ::google::protobuf::Message {
 public:
  PeerStatusNotify();
  virtual ~PeerStatusNotify();

  PeerStatusNotify(const PeerStatusNotify& from);

  inline PeerStatusNotify& operator=(const PeerStatusNotify& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerStatusNotify& default_instance();

  void Swap(PeerStatusNotify* other);

  // implements Message ----------------------------------------------

  inline PeerStatusNotify* New() const { return New(NULL); }

  PeerStatusNotify* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PeerStatusNotify& from);
  void MergeFrom(const PeerStatusNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeerStatusNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed32 statusCount = 1;
  inline void clear_statuscount();
  static const int kStatusCountFieldNumber = 1;
  inline ::google::protobuf::uint32 statuscount() const;
  inline void set_statuscount(::google::protobuf::uint32 value);

  // optional int64 timestamp = 2;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional string userID = 3;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 3;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // repeated string msgData = 4;
  inline int msgdata_size() const;
  inline void clear_msgdata();
  static const int kMsgDataFieldNumber = 4;
  inline const ::std::string& msgdata(int index) const;
  inline ::std::string* mutable_msgdata(int index);
  inline void set_msgdata(int index, const ::std::string& value);
  inline void set_msgdata(int index, const char* value);
  inline void set_msgdata(int index, const char* value, size_t size);
  inline ::std::string* add_msgdata();
  inline void add_msgdata(const ::std::string& value);
  inline void add_msgdata(const char* value);
  inline void add_msgdata(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& msgdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_msgdata();

  // @@protoc_insertion_point(class_scope:IMChat.PeerStatusNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> msgdata_;
  ::google::protobuf::uint32 statuscount_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageChat_2eproto();
  friend void protobuf_AssignDesc_MessageChat_2eproto();
  friend void protobuf_ShutdownFile_MessageChat_2eproto();

  void InitAsDefaultInstance();
  static PeerStatusNotify* default_instance_;
};
// -------------------------------------------------------------------

class PeerUserInfoRequest : public ::google::protobuf::Message {
 public:
  PeerUserInfoRequest();
  virtual ~PeerUserInfoRequest();

  PeerUserInfoRequest(const PeerUserInfoRequest& from);

  inline PeerUserInfoRequest& operator=(const PeerUserInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerUserInfoRequest& default_instance();

  void Swap(PeerUserInfoRequest* other);

  // implements Message ----------------------------------------------

  inline PeerUserInfoRequest* New() const { return New(NULL); }

  PeerUserInfoRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PeerUserInfoRequest& from);
  void MergeFrom(const PeerUserInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeerUserInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional string userID = 2;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 2;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // optional string requestID = 3;
  inline void clear_requestid();
  static const int kRequestIDFieldNumber = 3;
  inline const ::std::string& requestid() const;
  inline void set_requestid(const ::std::string& value);
  inline void set_requestid(const char* value);
  inline void set_requestid(const char* value, size_t size);
  inline ::std::string* mutable_requestid();
  inline ::std::string* release_requestid();
  inline void set_allocated_requestid(::std::string* requestid);

  // @@protoc_insertion_point(class_scope:IMChat.PeerUserInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr requestid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageChat_2eproto();
  friend void protobuf_AssignDesc_MessageChat_2eproto();
  friend void protobuf_ShutdownFile_MessageChat_2eproto();

  void InitAsDefaultInstance();
  static PeerUserInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class PeerUserInfoResponse : public ::google::protobuf::Message {
 public:
  PeerUserInfoResponse();
  virtual ~PeerUserInfoResponse();

  PeerUserInfoResponse(const PeerUserInfoResponse& from);

  inline PeerUserInfoResponse& operator=(const PeerUserInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerUserInfoResponse& default_instance();

  void Swap(PeerUserInfoResponse* other);

  // implements Message ----------------------------------------------

  inline PeerUserInfoResponse* New() const { return New(NULL); }

  PeerUserInfoResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PeerUserInfoResponse& from);
  void MergeFrom(const PeerUserInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeerUserInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional .IMChat.UserData userInfo = 2;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 2;
  inline const ::IMChat::UserData& userinfo() const;
  inline ::IMChat::UserData* mutable_userinfo();
  inline ::IMChat::UserData* release_userinfo();
  inline void set_allocated_userinfo(::IMChat::UserData* userinfo);

  // @@protoc_insertion_point(class_scope:IMChat.PeerUserInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 timestamp_;
  ::IMChat::UserData* userinfo_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageChat_2eproto();
  friend void protobuf_AssignDesc_MessageChat_2eproto();
  friend void protobuf_ShutdownFile_MessageChat_2eproto();

  void InitAsDefaultInstance();
  static PeerUserInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class PeerAllUserInfoRequest : public ::google::protobuf::Message {
 public:
  PeerAllUserInfoRequest();
  virtual ~PeerAllUserInfoRequest();

  PeerAllUserInfoRequest(const PeerAllUserInfoRequest& from);

  inline PeerAllUserInfoRequest& operator=(const PeerAllUserInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerAllUserInfoRequest& default_instance();

  void Swap(PeerAllUserInfoRequest* other);

  // implements Message ----------------------------------------------

  inline PeerAllUserInfoRequest* New() const { return New(NULL); }

  PeerAllUserInfoRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PeerAllUserInfoRequest& from);
  void MergeFrom(const PeerAllUserInfoRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeerAllUserInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional string userID = 2;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 2;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:IMChat.PeerAllUserInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageChat_2eproto();
  friend void protobuf_AssignDesc_MessageChat_2eproto();
  friend void protobuf_ShutdownFile_MessageChat_2eproto();

  void InitAsDefaultInstance();
  static PeerAllUserInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class PeerAllUserInfoResponse : public ::google::protobuf::Message {
 public:
  PeerAllUserInfoResponse();
  virtual ~PeerAllUserInfoResponse();

  PeerAllUserInfoResponse(const PeerAllUserInfoResponse& from);

  inline PeerAllUserInfoResponse& operator=(const PeerAllUserInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerAllUserInfoResponse& default_instance();

  void Swap(PeerAllUserInfoResponse* other);

  // implements Message ----------------------------------------------

  inline PeerAllUserInfoResponse* New() const { return New(NULL); }

  PeerAllUserInfoResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PeerAllUserInfoResponse& from);
  void MergeFrom(const PeerAllUserInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeerAllUserInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional int32 friendsCount = 2;
  inline void clear_friendscount();
  static const int kFriendsCountFieldNumber = 2;
  inline ::google::protobuf::int32 friendscount() const;
  inline void set_friendscount(::google::protobuf::int32 value);

  // optional string userID = 3;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 3;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // repeated .IMChat.UserData msgData = 4;
  inline int msgdata_size() const;
  inline void clear_msgdata();
  static const int kMsgDataFieldNumber = 4;
  inline const ::IMChat::UserData& msgdata(int index) const;
  inline ::IMChat::UserData* mutable_msgdata(int index);
  inline ::IMChat::UserData* add_msgdata();
  inline const ::google::protobuf::RepeatedPtrField< ::IMChat::UserData >&
      msgdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::IMChat::UserData >*
      mutable_msgdata();

  // @@protoc_insertion_point(class_scope:IMChat.PeerAllUserInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::RepeatedPtrField< ::IMChat::UserData > msgdata_;
  ::google::protobuf::int32 friendscount_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageChat_2eproto();
  friend void protobuf_AssignDesc_MessageChat_2eproto();
  friend void protobuf_ShutdownFile_MessageChat_2eproto();

  void InitAsDefaultInstance();
  static PeerAllUserInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class PeerCategoryRequest : public ::google::protobuf::Message {
 public:
  PeerCategoryRequest();
  virtual ~PeerCategoryRequest();

  PeerCategoryRequest(const PeerCategoryRequest& from);

  inline PeerCategoryRequest& operator=(const PeerCategoryRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerCategoryRequest& default_instance();

  void Swap(PeerCategoryRequest* other);

  // implements Message ----------------------------------------------

  inline PeerCategoryRequest* New() const { return New(NULL); }

  PeerCategoryRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PeerCategoryRequest& from);
  void MergeFrom(const PeerCategoryRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeerCategoryRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional string userID = 2;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 2;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:IMChat.PeerCategoryRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageChat_2eproto();
  friend void protobuf_AssignDesc_MessageChat_2eproto();
  friend void protobuf_ShutdownFile_MessageChat_2eproto();

  void InitAsDefaultInstance();
  static PeerCategoryRequest* default_instance_;
};
// -------------------------------------------------------------------

class PeerCategoryResponse_idCategory : public ::google::protobuf::Message {
 public:
  PeerCategoryResponse_idCategory();
  virtual ~PeerCategoryResponse_idCategory();

  PeerCategoryResponse_idCategory(const PeerCategoryResponse_idCategory& from);

  inline PeerCategoryResponse_idCategory& operator=(const PeerCategoryResponse_idCategory& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerCategoryResponse_idCategory& default_instance();

  void Swap(PeerCategoryResponse_idCategory* other);

  // implements Message ----------------------------------------------

  inline PeerCategoryResponse_idCategory* New() const { return New(NULL); }

  PeerCategoryResponse_idCategory* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PeerCategoryResponse_idCategory& from);
  void MergeFrom(const PeerCategoryResponse_idCategory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeerCategoryResponse_idCategory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string categoryId = 1;
  inline void clear_categoryid();
  static const int kCategoryIdFieldNumber = 1;
  inline const ::std::string& categoryid() const;
  inline void set_categoryid(const ::std::string& value);
  inline void set_categoryid(const char* value);
  inline void set_categoryid(const char* value, size_t size);
  inline ::std::string* mutable_categoryid();
  inline ::std::string* release_categoryid();
  inline void set_allocated_categoryid(::std::string* categoryid);

  // optional string friendID = 2;
  inline void clear_friendid();
  static const int kFriendIDFieldNumber = 2;
  inline const ::std::string& friendid() const;
  inline void set_friendid(const ::std::string& value);
  inline void set_friendid(const char* value);
  inline void set_friendid(const char* value, size_t size);
  inline ::std::string* mutable_friendid();
  inline ::std::string* release_friendid();
  inline void set_allocated_friendid(::std::string* friendid);

  // @@protoc_insertion_point(class_scope:IMChat.PeerCategoryResponse.idCategory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr categoryid_;
  ::google::protobuf::internal::ArenaStringPtr friendid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageChat_2eproto();
  friend void protobuf_AssignDesc_MessageChat_2eproto();
  friend void protobuf_ShutdownFile_MessageChat_2eproto();

  void InitAsDefaultInstance();
  static PeerCategoryResponse_idCategory* default_instance_;
};
// -------------------------------------------------------------------

class PeerCategoryResponse : public ::google::protobuf::Message {
 public:
  PeerCategoryResponse();
  virtual ~PeerCategoryResponse();

  PeerCategoryResponse(const PeerCategoryResponse& from);

  inline PeerCategoryResponse& operator=(const PeerCategoryResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PeerCategoryResponse& default_instance();

  void Swap(PeerCategoryResponse* other);

  // implements Message ----------------------------------------------

  inline PeerCategoryResponse* New() const { return New(NULL); }

  PeerCategoryResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PeerCategoryResponse& from);
  void MergeFrom(const PeerCategoryResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeerCategoryResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PeerCategoryResponse_idCategory idCategory;

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional int32 categoryCount = 2;
  inline void clear_categorycount();
  static const int kCategoryCountFieldNumber = 2;
  inline ::google::protobuf::int32 categorycount() const;
  inline void set_categorycount(::google::protobuf::int32 value);

  // optional string userID = 3;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 3;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // repeated .IMChat.PeerCategoryResponse.idCategory msgData = 4;
  inline int msgdata_size() const;
  inline void clear_msgdata();
  static const int kMsgDataFieldNumber = 4;
  inline const ::IMChat::PeerCategoryResponse_idCategory& msgdata(int index) const;
  inline ::IMChat::PeerCategoryResponse_idCategory* mutable_msgdata(int index);
  inline ::IMChat::PeerCategoryResponse_idCategory* add_msgdata();
  inline const ::google::protobuf::RepeatedPtrField< ::IMChat::PeerCategoryResponse_idCategory >&
      msgdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::IMChat::PeerCategoryResponse_idCategory >*
      mutable_msgdata();

  // @@protoc_insertion_point(class_scope:IMChat.PeerCategoryResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::RepeatedPtrField< ::IMChat::PeerCategoryResponse_idCategory > msgdata_;
  ::google::protobuf::int32 categorycount_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageChat_2eproto();
  friend void protobuf_AssignDesc_MessageChat_2eproto();
  friend void protobuf_ShutdownFile_MessageChat_2eproto();

  void InitAsDefaultInstance();
  static PeerCategoryResponse* default_instance_;
};
// -------------------------------------------------------------------

class GroupAllRequest : public ::google::protobuf::Message {
 public:
  GroupAllRequest();
  virtual ~GroupAllRequest();

  GroupAllRequest(const GroupAllRequest& from);

  inline GroupAllRequest& operator=(const GroupAllRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupAllRequest& default_instance();

  void Swap(GroupAllRequest* other);

  // implements Message ----------------------------------------------

  inline GroupAllRequest* New() const { return New(NULL); }

  GroupAllRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupAllRequest& from);
  void MergeFrom(const GroupAllRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupAllRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional string userID = 2;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 2;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:IMChat.GroupAllRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageChat_2eproto();
  friend void protobuf_AssignDesc_MessageChat_2eproto();
  friend void protobuf_ShutdownFile_MessageChat_2eproto();

  void InitAsDefaultInstance();
  static GroupAllRequest* default_instance_;
};
// -------------------------------------------------------------------

class GroupInfo : public ::google::protobuf::Message {
 public:
  GroupInfo();
  virtual ~GroupInfo();

  GroupInfo(const GroupInfo& from);

  inline GroupInfo& operator=(const GroupInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupInfo& default_instance();

  void Swap(GroupInfo* other);

  // implements Message ----------------------------------------------

  inline GroupInfo* New() const { return New(NULL); }

  GroupInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupInfo& from);
  void MergeFrom(const GroupInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string groupID = 2;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 2;
  inline const ::std::string& groupid() const;
  inline void set_groupid(const ::std::string& value);
  inline void set_groupid(const char* value);
  inline void set_groupid(const char* value, size_t size);
  inline ::std::string* mutable_groupid();
  inline ::std::string* release_groupid();
  inline void set_allocated_groupid(::std::string* groupid);

  // optional string groupName = 3;
  inline void clear_groupname();
  static const int kGroupNameFieldNumber = 3;
  inline const ::std::string& groupname() const;
  inline void set_groupname(const ::std::string& value);
  inline void set_groupname(const char* value);
  inline void set_groupname(const char* value, size_t size);
  inline ::std::string* mutable_groupname();
  inline ::std::string* release_groupname();
  inline void set_allocated_groupname(::std::string* groupname);

  // optional string image_url = 4;
  inline void clear_image_url();
  static const int kImageUrlFieldNumber = 4;
  inline const ::std::string& image_url() const;
  inline void set_image_url(const ::std::string& value);
  inline void set_image_url(const char* value);
  inline void set_image_url(const char* value, size_t size);
  inline ::std::string* mutable_image_url();
  inline ::std::string* release_image_url();
  inline void set_allocated_image_url(::std::string* image_url);

  // @@protoc_insertion_point(class_scope:IMChat.GroupInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr groupid_;
  ::google::protobuf::internal::ArenaStringPtr groupname_;
  ::google::protobuf::internal::ArenaStringPtr image_url_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageChat_2eproto();
  friend void protobuf_AssignDesc_MessageChat_2eproto();
  friend void protobuf_ShutdownFile_MessageChat_2eproto();

  void InitAsDefaultInstance();
  static GroupInfo* default_instance_;
};
// -------------------------------------------------------------------

class GroupAllResponse : public ::google::protobuf::Message {
 public:
  GroupAllResponse();
  virtual ~GroupAllResponse();

  GroupAllResponse(const GroupAllResponse& from);

  inline GroupAllResponse& operator=(const GroupAllResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupAllResponse& default_instance();

  void Swap(GroupAllResponse* other);

  // implements Message ----------------------------------------------

  inline GroupAllResponse* New() const { return New(NULL); }

  GroupAllResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupAllResponse& from);
  void MergeFrom(const GroupAllResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupAllResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional int32 groupCount = 2;
  inline void clear_groupcount();
  static const int kGroupCountFieldNumber = 2;
  inline ::google::protobuf::int32 groupcount() const;
  inline void set_groupcount(::google::protobuf::int32 value);

  // optional string userID = 3;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 3;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // repeated .IMChat.GroupInfo msgData = 4;
  inline int msgdata_size() const;
  inline void clear_msgdata();
  static const int kMsgDataFieldNumber = 4;
  inline const ::IMChat::GroupInfo& msgdata(int index) const;
  inline ::IMChat::GroupInfo* mutable_msgdata(int index);
  inline ::IMChat::GroupInfo* add_msgdata();
  inline const ::google::protobuf::RepeatedPtrField< ::IMChat::GroupInfo >&
      msgdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::IMChat::GroupInfo >*
      mutable_msgdata();

  // @@protoc_insertion_point(class_scope:IMChat.GroupAllResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::RepeatedPtrField< ::IMChat::GroupInfo > msgdata_;
  ::google::protobuf::int32 groupcount_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageChat_2eproto();
  friend void protobuf_AssignDesc_MessageChat_2eproto();
  friend void protobuf_ShutdownFile_MessageChat_2eproto();

  void InitAsDefaultInstance();
  static GroupAllResponse* default_instance_;
};
// -------------------------------------------------------------------

class GroupMemberInfo : public ::google::protobuf::Message {
 public:
  GroupMemberInfo();
  virtual ~GroupMemberInfo();

  GroupMemberInfo(const GroupMemberInfo& from);

  inline GroupMemberInfo& operator=(const GroupMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupMemberInfo& default_instance();

  void Swap(GroupMemberInfo* other);

  // implements Message ----------------------------------------------

  inline GroupMemberInfo* New() const { return New(NULL); }

  GroupMemberInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupMemberInfo& from);
  void MergeFrom(const GroupMemberInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupMemberInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string userID = 2;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 2;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // optional string nick_name = 3;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 3;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // optional string image_url = 4;
  inline void clear_image_url();
  static const int kImageUrlFieldNumber = 4;
  inline const ::std::string& image_url() const;
  inline void set_image_url(const ::std::string& value);
  inline void set_image_url(const char* value);
  inline void set_image_url(const char* value, size_t size);
  inline ::std::string* mutable_image_url();
  inline ::std::string* release_image_url();
  inline void set_allocated_image_url(::std::string* image_url);

  // optional int32 online_status = 5;
  inline void clear_online_status();
  static const int kOnlineStatusFieldNumber = 5;
  inline ::google::protobuf::int32 online_status() const;
  inline void set_online_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:IMChat.GroupMemberInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr nick_name_;
  ::google::protobuf::internal::ArenaStringPtr image_url_;
  ::google::protobuf::int32 online_status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageChat_2eproto();
  friend void protobuf_AssignDesc_MessageChat_2eproto();
  friend void protobuf_ShutdownFile_MessageChat_2eproto();

  void InitAsDefaultInstance();
  static GroupMemberInfo* default_instance_;
};
// -------------------------------------------------------------------

class GroupMembeRequest : public ::google::protobuf::Message {
 public:
  GroupMembeRequest();
  virtual ~GroupMembeRequest();

  GroupMembeRequest(const GroupMembeRequest& from);

  inline GroupMembeRequest& operator=(const GroupMembeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupMembeRequest& default_instance();

  void Swap(GroupMembeRequest* other);

  // implements Message ----------------------------------------------

  inline GroupMembeRequest* New() const { return New(NULL); }

  GroupMembeRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupMembeRequest& from);
  void MergeFrom(const GroupMembeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupMembeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional string groupID = 2;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 2;
  inline const ::std::string& groupid() const;
  inline void set_groupid(const ::std::string& value);
  inline void set_groupid(const char* value);
  inline void set_groupid(const char* value, size_t size);
  inline ::std::string* mutable_groupid();
  inline ::std::string* release_groupid();
  inline void set_allocated_groupid(::std::string* groupid);

  // optional string userID = 3;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 3;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:IMChat.GroupMembeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::internal::ArenaStringPtr groupid_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageChat_2eproto();
  friend void protobuf_AssignDesc_MessageChat_2eproto();
  friend void protobuf_ShutdownFile_MessageChat_2eproto();

  void InitAsDefaultInstance();
  static GroupMembeRequest* default_instance_;
};
// -------------------------------------------------------------------

class GroupMemberResponse : public ::google::protobuf::Message {
 public:
  GroupMemberResponse();
  virtual ~GroupMemberResponse();

  GroupMemberResponse(const GroupMemberResponse& from);

  inline GroupMemberResponse& operator=(const GroupMemberResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupMemberResponse& default_instance();

  void Swap(GroupMemberResponse* other);

  // implements Message ----------------------------------------------

  inline GroupMemberResponse* New() const { return New(NULL); }

  GroupMemberResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupMemberResponse& from);
  void MergeFrom(const GroupMemberResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupMemberResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 timestamp = 1;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional int32 memberCount = 2;
  inline void clear_membercount();
  static const int kMemberCountFieldNumber = 2;
  inline ::google::protobuf::int32 membercount() const;
  inline void set_membercount(::google::protobuf::int32 value);

  // optional string userID = 3;
  inline void clear_userid();
  static const int kUserIDFieldNumber = 3;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // optional string groupID = 4;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 4;
  inline const ::std::string& groupid() const;
  inline void set_groupid(const ::std::string& value);
  inline void set_groupid(const char* value);
  inline void set_groupid(const char* value, size_t size);
  inline ::std::string* mutable_groupid();
  inline ::std::string* release_groupid();
  inline void set_allocated_groupid(::std::string* groupid);

  // repeated .IMChat.GroupMemberInfo msgData = 5;
  inline int msgdata_size() const;
  inline void clear_msgdata();
  static const int kMsgDataFieldNumber = 5;
  inline const ::IMChat::GroupMemberInfo& msgdata(int index) const;
  inline ::IMChat::GroupMemberInfo* mutable_msgdata(int index);
  inline ::IMChat::GroupMemberInfo* add_msgdata();
  inline const ::google::protobuf::RepeatedPtrField< ::IMChat::GroupMemberInfo >&
      msgdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::IMChat::GroupMemberInfo >*
      mutable_msgdata();

  // @@protoc_insertion_point(class_scope:IMChat.GroupMemberResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr groupid_;
  ::google::protobuf::RepeatedPtrField< ::IMChat::GroupMemberInfo > msgdata_;
  ::google::protobuf::int32 membercount_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_MessageChat_2eproto();
  friend void protobuf_AssignDesc_MessageChat_2eproto();
  friend void protobuf_ShutdownFile_MessageChat_2eproto();

  void InitAsDefaultInstance();
  static GroupMemberResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// shakeHandleReq

// optional int64 timestamp = 1;
inline void shakeHandleReq::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 shakeHandleReq::timestamp() const {
  // @@protoc_insertion_point(field_get:IMChat.shakeHandleReq.timestamp)
  return timestamp_;
}
inline void shakeHandleReq::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IMChat.shakeHandleReq.timestamp)
}

// optional string userID = 2;
inline void shakeHandleReq::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& shakeHandleReq::userid() const {
  // @@protoc_insertion_point(field_get:IMChat.shakeHandleReq.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void shakeHandleReq::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.shakeHandleReq.userID)
}
inline void shakeHandleReq::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.shakeHandleReq.userID)
}
inline void shakeHandleReq::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.shakeHandleReq.userID)
}
inline ::std::string* shakeHandleReq::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.shakeHandleReq.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* shakeHandleReq::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void shakeHandleReq::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:IMChat.shakeHandleReq.userID)
}

// -------------------------------------------------------------------

// shakeHandleRes

// optional int64 timestamp = 1;
inline void shakeHandleRes::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 shakeHandleRes::timestamp() const {
  // @@protoc_insertion_point(field_get:IMChat.shakeHandleRes.timestamp)
  return timestamp_;
}
inline void shakeHandleRes::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IMChat.shakeHandleRes.timestamp)
}

// optional sint32 result = 2;
inline void shakeHandleRes::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 shakeHandleRes::result() const {
  // @@protoc_insertion_point(field_get:IMChat.shakeHandleRes.result)
  return result_;
}
inline void shakeHandleRes::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:IMChat.shakeHandleRes.result)
}

// -------------------------------------------------------------------

// UserData

// optional sint32 online_status = 1;
inline void UserData::clear_online_status() {
  online_status_ = 0;
}
inline ::google::protobuf::int32 UserData::online_status() const {
  // @@protoc_insertion_point(field_get:IMChat.UserData.online_status)
  return online_status_;
}
inline void UserData::set_online_status(::google::protobuf::int32 value) {
  
  online_status_ = value;
  // @@protoc_insertion_point(field_set:IMChat.UserData.online_status)
}

// optional int64 timestamp = 2;
inline void UserData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 UserData::timestamp() const {
  // @@protoc_insertion_point(field_get:IMChat.UserData.timestamp)
  return timestamp_;
}
inline void UserData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IMChat.UserData.timestamp)
}

// optional string user_id = 3;
inline void UserData::clear_user_id() {
  user_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserData::user_id() const {
  // @@protoc_insertion_point(field_get:IMChat.UserData.user_id)
  return user_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserData::set_user_id(const ::std::string& value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.UserData.user_id)
}
inline void UserData::set_user_id(const char* value) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.UserData.user_id)
}
inline void UserData::set_user_id(const char* value, size_t size) {
  
  user_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.UserData.user_id)
}
inline ::std::string* UserData::mutable_user_id() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.UserData.user_id)
  return user_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserData::release_user_id() {
  
  return user_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserData::set_allocated_user_id(::std::string* user_id) {
  if (user_id != NULL) {
    
  } else {
    
  }
  user_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_id);
  // @@protoc_insertion_point(field_set_allocated:IMChat.UserData.user_id)
}

// optional string name = 4;
inline void UserData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserData::name() const {
  // @@protoc_insertion_point(field_get:IMChat.UserData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.UserData.name)
}
inline void UserData::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.UserData.name)
}
inline void UserData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.UserData.name)
}
inline ::std::string* UserData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.UserData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserData::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:IMChat.UserData.name)
}

// optional string nick_name = 5;
inline void UserData::clear_nick_name() {
  nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserData::nick_name() const {
  // @@protoc_insertion_point(field_get:IMChat.UserData.nick_name)
  return nick_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserData::set_nick_name(const ::std::string& value) {
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.UserData.nick_name)
}
inline void UserData::set_nick_name(const char* value) {
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.UserData.nick_name)
}
inline void UserData::set_nick_name(const char* value, size_t size) {
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.UserData.nick_name)
}
inline ::std::string* UserData::mutable_nick_name() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.UserData.nick_name)
  return nick_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserData::release_nick_name() {
  
  return nick_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserData::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name != NULL) {
    
  } else {
    
  }
  nick_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick_name);
  // @@protoc_insertion_point(field_set_allocated:IMChat.UserData.nick_name)
}

// optional string image_url = 6;
inline void UserData::clear_image_url() {
  image_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserData::image_url() const {
  // @@protoc_insertion_point(field_get:IMChat.UserData.image_url)
  return image_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserData::set_image_url(const ::std::string& value) {
  
  image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.UserData.image_url)
}
inline void UserData::set_image_url(const char* value) {
  
  image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.UserData.image_url)
}
inline void UserData::set_image_url(const char* value, size_t size) {
  
  image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.UserData.image_url)
}
inline ::std::string* UserData::mutable_image_url() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.UserData.image_url)
  return image_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserData::release_image_url() {
  
  return image_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserData::set_allocated_image_url(::std::string* image_url) {
  if (image_url != NULL) {
    
  } else {
    
  }
  image_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_url);
  // @@protoc_insertion_point(field_set_allocated:IMChat.UserData.image_url)
}

// optional string position = 7;
inline void UserData::clear_position() {
  position_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserData::position() const {
  // @@protoc_insertion_point(field_get:IMChat.UserData.position)
  return position_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserData::set_position(const ::std::string& value) {
  
  position_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.UserData.position)
}
inline void UserData::set_position(const char* value) {
  
  position_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.UserData.position)
}
inline void UserData::set_position(const char* value, size_t size) {
  
  position_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.UserData.position)
}
inline ::std::string* UserData::mutable_position() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.UserData.position)
  return position_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserData::release_position() {
  
  return position_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserData::set_allocated_position(::std::string* position) {
  if (position != NULL) {
    
  } else {
    
  }
  position_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), position);
  // @@protoc_insertion_point(field_set_allocated:IMChat.UserData.position)
}

// optional string email = 8;
inline void UserData::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserData::email() const {
  // @@protoc_insertion_point(field_get:IMChat.UserData.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserData::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.UserData.email)
}
inline void UserData::set_email(const char* value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.UserData.email)
}
inline void UserData::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.UserData.email)
}
inline ::std::string* UserData::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.UserData.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserData::release_email() {
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserData::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:IMChat.UserData.email)
}

// optional sint32 sex = 9;
inline void UserData::clear_sex() {
  sex_ = 0;
}
inline ::google::protobuf::int32 UserData::sex() const {
  // @@protoc_insertion_point(field_get:IMChat.UserData.sex)
  return sex_;
}
inline void UserData::set_sex(::google::protobuf::int32 value) {
  
  sex_ = value;
  // @@protoc_insertion_point(field_set:IMChat.UserData.sex)
}

// -------------------------------------------------------------------

// MsgData

// optional int64 timestamp = 1;
inline void MsgData::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MsgData::timestamp() const {
  // @@protoc_insertion_point(field_get:IMChat.MsgData.timestamp)
  return timestamp_;
}
inline void MsgData::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IMChat.MsgData.timestamp)
}

// optional fixed32 SequenceNumber = 2;
inline void MsgData::clear_sequencenumber() {
  sequencenumber_ = 0u;
}
inline ::google::protobuf::uint32 MsgData::sequencenumber() const {
  // @@protoc_insertion_point(field_get:IMChat.MsgData.SequenceNumber)
  return sequencenumber_;
}
inline void MsgData::set_sequencenumber(::google::protobuf::uint32 value) {
  
  sequencenumber_ = value;
  // @@protoc_insertion_point(field_set:IMChat.MsgData.SequenceNumber)
}

// optional string fromId = 3;
inline void MsgData::clear_fromid() {
  fromid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgData::fromid() const {
  // @@protoc_insertion_point(field_get:IMChat.MsgData.fromId)
  return fromid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgData::set_fromid(const ::std::string& value) {
  
  fromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.MsgData.fromId)
}
inline void MsgData::set_fromid(const char* value) {
  
  fromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.MsgData.fromId)
}
inline void MsgData::set_fromid(const char* value, size_t size) {
  
  fromid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.MsgData.fromId)
}
inline ::std::string* MsgData::mutable_fromid() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.MsgData.fromId)
  return fromid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgData::release_fromid() {
  
  return fromid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgData::set_allocated_fromid(::std::string* fromid) {
  if (fromid != NULL) {
    
  } else {
    
  }
  fromid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromid);
  // @@protoc_insertion_point(field_set_allocated:IMChat.MsgData.fromId)
}

// optional string toID = 4;
inline void MsgData::clear_toid() {
  toid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgData::toid() const {
  // @@protoc_insertion_point(field_get:IMChat.MsgData.toID)
  return toid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgData::set_toid(const ::std::string& value) {
  
  toid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.MsgData.toID)
}
inline void MsgData::set_toid(const char* value) {
  
  toid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.MsgData.toID)
}
inline void MsgData::set_toid(const char* value, size_t size) {
  
  toid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.MsgData.toID)
}
inline ::std::string* MsgData::mutable_toid() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.MsgData.toID)
  return toid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgData::release_toid() {
  
  return toid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgData::set_allocated_toid(::std::string* toid) {
  if (toid != NULL) {
    
  } else {
    
  }
  toid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), toid);
  // @@protoc_insertion_point(field_set_allocated:IMChat.MsgData.toID)
}

// optional bytes msgData = 5;
inline void MsgData::clear_msgdata() {
  msgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgData::msgdata() const {
  // @@protoc_insertion_point(field_get:IMChat.MsgData.msgData)
  return msgdata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgData::set_msgdata(const ::std::string& value) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.MsgData.msgData)
}
inline void MsgData::set_msgdata(const char* value) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.MsgData.msgData)
}
inline void MsgData::set_msgdata(const void* value, size_t size) {
  
  msgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.MsgData.msgData)
}
inline ::std::string* MsgData::mutable_msgdata() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.MsgData.msgData)
  return msgdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgData::release_msgdata() {
  
  return msgdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgData::set_allocated_msgdata(::std::string* msgdata) {
  if (msgdata != NULL) {
    
  } else {
    
  }
  msgdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgdata);
  // @@protoc_insertion_point(field_set_allocated:IMChat.MsgData.msgData)
}

// optional .IMChat.MsgData.MSGTYPE type = 6;
inline void MsgData::clear_type() {
  type_ = 0;
}
inline ::IMChat::MsgData_MSGTYPE MsgData::type() const {
  // @@protoc_insertion_point(field_get:IMChat.MsgData.type)
  return static_cast< ::IMChat::MsgData_MSGTYPE >(type_);
}
inline void MsgData::set_type(::IMChat::MsgData_MSGTYPE value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:IMChat.MsgData.type)
}

// -------------------------------------------------------------------

// UnreadMsgRequest

// optional string userId = 1;
inline void UnreadMsgRequest::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnreadMsgRequest::userid() const {
  // @@protoc_insertion_point(field_get:IMChat.UnreadMsgRequest.userId)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnreadMsgRequest::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.UnreadMsgRequest.userId)
}
inline void UnreadMsgRequest::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.UnreadMsgRequest.userId)
}
inline void UnreadMsgRequest::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.UnreadMsgRequest.userId)
}
inline ::std::string* UnreadMsgRequest::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.UnreadMsgRequest.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnreadMsgRequest::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnreadMsgRequest::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:IMChat.UnreadMsgRequest.userId)
}

// optional int64 timestamp = 2;
inline void UnreadMsgRequest::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 UnreadMsgRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:IMChat.UnreadMsgRequest.timestamp)
  return timestamp_;
}
inline void UnreadMsgRequest::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IMChat.UnreadMsgRequest.timestamp)
}

// -------------------------------------------------------------------

// UnreadMsgResponse

// optional int32 msgCount = 1;
inline void UnreadMsgResponse::clear_msgcount() {
  msgcount_ = 0;
}
inline ::google::protobuf::int32 UnreadMsgResponse::msgcount() const {
  // @@protoc_insertion_point(field_get:IMChat.UnreadMsgResponse.msgCount)
  return msgcount_;
}
inline void UnreadMsgResponse::set_msgcount(::google::protobuf::int32 value) {
  
  msgcount_ = value;
  // @@protoc_insertion_point(field_set:IMChat.UnreadMsgResponse.msgCount)
}

// optional int64 timestamp = 2;
inline void UnreadMsgResponse::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 UnreadMsgResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:IMChat.UnreadMsgResponse.timestamp)
  return timestamp_;
}
inline void UnreadMsgResponse::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IMChat.UnreadMsgResponse.timestamp)
}

// optional string userID = 3;
inline void UnreadMsgResponse::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UnreadMsgResponse::userid() const {
  // @@protoc_insertion_point(field_get:IMChat.UnreadMsgResponse.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnreadMsgResponse::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.UnreadMsgResponse.userID)
}
inline void UnreadMsgResponse::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.UnreadMsgResponse.userID)
}
inline void UnreadMsgResponse::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.UnreadMsgResponse.userID)
}
inline ::std::string* UnreadMsgResponse::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.UnreadMsgResponse.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnreadMsgResponse::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnreadMsgResponse::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:IMChat.UnreadMsgResponse.userID)
}

// repeated bytes msgData = 4;
inline int UnreadMsgResponse::msgdata_size() const {
  return msgdata_.size();
}
inline void UnreadMsgResponse::clear_msgdata() {
  msgdata_.Clear();
}
inline const ::std::string& UnreadMsgResponse::msgdata(int index) const {
  // @@protoc_insertion_point(field_get:IMChat.UnreadMsgResponse.msgData)
  return msgdata_.Get(index);
}
inline ::std::string* UnreadMsgResponse::mutable_msgdata(int index) {
  // @@protoc_insertion_point(field_mutable:IMChat.UnreadMsgResponse.msgData)
  return msgdata_.Mutable(index);
}
inline void UnreadMsgResponse::set_msgdata(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IMChat.UnreadMsgResponse.msgData)
  msgdata_.Mutable(index)->assign(value);
}
inline void UnreadMsgResponse::set_msgdata(int index, const char* value) {
  msgdata_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IMChat.UnreadMsgResponse.msgData)
}
inline void UnreadMsgResponse::set_msgdata(int index, const void* value, size_t size) {
  msgdata_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IMChat.UnreadMsgResponse.msgData)
}
inline ::std::string* UnreadMsgResponse::add_msgdata() {
  return msgdata_.Add();
}
inline void UnreadMsgResponse::add_msgdata(const ::std::string& value) {
  msgdata_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IMChat.UnreadMsgResponse.msgData)
}
inline void UnreadMsgResponse::add_msgdata(const char* value) {
  msgdata_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IMChat.UnreadMsgResponse.msgData)
}
inline void UnreadMsgResponse::add_msgdata(const void* value, size_t size) {
  msgdata_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IMChat.UnreadMsgResponse.msgData)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UnreadMsgResponse::msgdata() const {
  // @@protoc_insertion_point(field_list:IMChat.UnreadMsgResponse.msgData)
  return msgdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UnreadMsgResponse::mutable_msgdata() {
  // @@protoc_insertion_point(field_mutable_list:IMChat.UnreadMsgResponse.msgData)
  return &msgdata_;
}

// -------------------------------------------------------------------

// PeerOnlineNotify

// optional int32 onlineCount = 1;
inline void PeerOnlineNotify::clear_onlinecount() {
  onlinecount_ = 0;
}
inline ::google::protobuf::int32 PeerOnlineNotify::onlinecount() const {
  // @@protoc_insertion_point(field_get:IMChat.PeerOnlineNotify.onlineCount)
  return onlinecount_;
}
inline void PeerOnlineNotify::set_onlinecount(::google::protobuf::int32 value) {
  
  onlinecount_ = value;
  // @@protoc_insertion_point(field_set:IMChat.PeerOnlineNotify.onlineCount)
}

// optional int64 timestamp = 2;
inline void PeerOnlineNotify::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PeerOnlineNotify::timestamp() const {
  // @@protoc_insertion_point(field_get:IMChat.PeerOnlineNotify.timestamp)
  return timestamp_;
}
inline void PeerOnlineNotify::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IMChat.PeerOnlineNotify.timestamp)
}

// optional string userID = 3;
inline void PeerOnlineNotify::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerOnlineNotify::userid() const {
  // @@protoc_insertion_point(field_get:IMChat.PeerOnlineNotify.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerOnlineNotify::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.PeerOnlineNotify.userID)
}
inline void PeerOnlineNotify::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.PeerOnlineNotify.userID)
}
inline void PeerOnlineNotify::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.PeerOnlineNotify.userID)
}
inline ::std::string* PeerOnlineNotify::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.PeerOnlineNotify.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerOnlineNotify::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerOnlineNotify::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:IMChat.PeerOnlineNotify.userID)
}

// repeated string msgData = 4;
inline int PeerOnlineNotify::msgdata_size() const {
  return msgdata_.size();
}
inline void PeerOnlineNotify::clear_msgdata() {
  msgdata_.Clear();
}
inline const ::std::string& PeerOnlineNotify::msgdata(int index) const {
  // @@protoc_insertion_point(field_get:IMChat.PeerOnlineNotify.msgData)
  return msgdata_.Get(index);
}
inline ::std::string* PeerOnlineNotify::mutable_msgdata(int index) {
  // @@protoc_insertion_point(field_mutable:IMChat.PeerOnlineNotify.msgData)
  return msgdata_.Mutable(index);
}
inline void PeerOnlineNotify::set_msgdata(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IMChat.PeerOnlineNotify.msgData)
  msgdata_.Mutable(index)->assign(value);
}
inline void PeerOnlineNotify::set_msgdata(int index, const char* value) {
  msgdata_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IMChat.PeerOnlineNotify.msgData)
}
inline void PeerOnlineNotify::set_msgdata(int index, const char* value, size_t size) {
  msgdata_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IMChat.PeerOnlineNotify.msgData)
}
inline ::std::string* PeerOnlineNotify::add_msgdata() {
  return msgdata_.Add();
}
inline void PeerOnlineNotify::add_msgdata(const ::std::string& value) {
  msgdata_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IMChat.PeerOnlineNotify.msgData)
}
inline void PeerOnlineNotify::add_msgdata(const char* value) {
  msgdata_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IMChat.PeerOnlineNotify.msgData)
}
inline void PeerOnlineNotify::add_msgdata(const char* value, size_t size) {
  msgdata_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IMChat.PeerOnlineNotify.msgData)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PeerOnlineNotify::msgdata() const {
  // @@protoc_insertion_point(field_list:IMChat.PeerOnlineNotify.msgData)
  return msgdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PeerOnlineNotify::mutable_msgdata() {
  // @@protoc_insertion_point(field_mutable_list:IMChat.PeerOnlineNotify.msgData)
  return &msgdata_;
}

// -------------------------------------------------------------------

// PeerStatusNotify

// optional fixed32 statusCount = 1;
inline void PeerStatusNotify::clear_statuscount() {
  statuscount_ = 0u;
}
inline ::google::protobuf::uint32 PeerStatusNotify::statuscount() const {
  // @@protoc_insertion_point(field_get:IMChat.PeerStatusNotify.statusCount)
  return statuscount_;
}
inline void PeerStatusNotify::set_statuscount(::google::protobuf::uint32 value) {
  
  statuscount_ = value;
  // @@protoc_insertion_point(field_set:IMChat.PeerStatusNotify.statusCount)
}

// optional int64 timestamp = 2;
inline void PeerStatusNotify::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PeerStatusNotify::timestamp() const {
  // @@protoc_insertion_point(field_get:IMChat.PeerStatusNotify.timestamp)
  return timestamp_;
}
inline void PeerStatusNotify::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IMChat.PeerStatusNotify.timestamp)
}

// optional string userID = 3;
inline void PeerStatusNotify::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerStatusNotify::userid() const {
  // @@protoc_insertion_point(field_get:IMChat.PeerStatusNotify.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerStatusNotify::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.PeerStatusNotify.userID)
}
inline void PeerStatusNotify::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.PeerStatusNotify.userID)
}
inline void PeerStatusNotify::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.PeerStatusNotify.userID)
}
inline ::std::string* PeerStatusNotify::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.PeerStatusNotify.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerStatusNotify::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerStatusNotify::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:IMChat.PeerStatusNotify.userID)
}

// repeated string msgData = 4;
inline int PeerStatusNotify::msgdata_size() const {
  return msgdata_.size();
}
inline void PeerStatusNotify::clear_msgdata() {
  msgdata_.Clear();
}
inline const ::std::string& PeerStatusNotify::msgdata(int index) const {
  // @@protoc_insertion_point(field_get:IMChat.PeerStatusNotify.msgData)
  return msgdata_.Get(index);
}
inline ::std::string* PeerStatusNotify::mutable_msgdata(int index) {
  // @@protoc_insertion_point(field_mutable:IMChat.PeerStatusNotify.msgData)
  return msgdata_.Mutable(index);
}
inline void PeerStatusNotify::set_msgdata(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:IMChat.PeerStatusNotify.msgData)
  msgdata_.Mutable(index)->assign(value);
}
inline void PeerStatusNotify::set_msgdata(int index, const char* value) {
  msgdata_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:IMChat.PeerStatusNotify.msgData)
}
inline void PeerStatusNotify::set_msgdata(int index, const char* value, size_t size) {
  msgdata_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:IMChat.PeerStatusNotify.msgData)
}
inline ::std::string* PeerStatusNotify::add_msgdata() {
  return msgdata_.Add();
}
inline void PeerStatusNotify::add_msgdata(const ::std::string& value) {
  msgdata_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:IMChat.PeerStatusNotify.msgData)
}
inline void PeerStatusNotify::add_msgdata(const char* value) {
  msgdata_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:IMChat.PeerStatusNotify.msgData)
}
inline void PeerStatusNotify::add_msgdata(const char* value, size_t size) {
  msgdata_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:IMChat.PeerStatusNotify.msgData)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PeerStatusNotify::msgdata() const {
  // @@protoc_insertion_point(field_list:IMChat.PeerStatusNotify.msgData)
  return msgdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PeerStatusNotify::mutable_msgdata() {
  // @@protoc_insertion_point(field_mutable_list:IMChat.PeerStatusNotify.msgData)
  return &msgdata_;
}

// -------------------------------------------------------------------

// PeerUserInfoRequest

// optional int64 timestamp = 1;
inline void PeerUserInfoRequest::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PeerUserInfoRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:IMChat.PeerUserInfoRequest.timestamp)
  return timestamp_;
}
inline void PeerUserInfoRequest::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IMChat.PeerUserInfoRequest.timestamp)
}

// optional string userID = 2;
inline void PeerUserInfoRequest::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerUserInfoRequest::userid() const {
  // @@protoc_insertion_point(field_get:IMChat.PeerUserInfoRequest.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerUserInfoRequest::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.PeerUserInfoRequest.userID)
}
inline void PeerUserInfoRequest::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.PeerUserInfoRequest.userID)
}
inline void PeerUserInfoRequest::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.PeerUserInfoRequest.userID)
}
inline ::std::string* PeerUserInfoRequest::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.PeerUserInfoRequest.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerUserInfoRequest::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerUserInfoRequest::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:IMChat.PeerUserInfoRequest.userID)
}

// optional string requestID = 3;
inline void PeerUserInfoRequest::clear_requestid() {
  requestid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerUserInfoRequest::requestid() const {
  // @@protoc_insertion_point(field_get:IMChat.PeerUserInfoRequest.requestID)
  return requestid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerUserInfoRequest::set_requestid(const ::std::string& value) {
  
  requestid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.PeerUserInfoRequest.requestID)
}
inline void PeerUserInfoRequest::set_requestid(const char* value) {
  
  requestid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.PeerUserInfoRequest.requestID)
}
inline void PeerUserInfoRequest::set_requestid(const char* value, size_t size) {
  
  requestid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.PeerUserInfoRequest.requestID)
}
inline ::std::string* PeerUserInfoRequest::mutable_requestid() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.PeerUserInfoRequest.requestID)
  return requestid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerUserInfoRequest::release_requestid() {
  
  return requestid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerUserInfoRequest::set_allocated_requestid(::std::string* requestid) {
  if (requestid != NULL) {
    
  } else {
    
  }
  requestid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requestid);
  // @@protoc_insertion_point(field_set_allocated:IMChat.PeerUserInfoRequest.requestID)
}

// -------------------------------------------------------------------

// PeerUserInfoResponse

// optional int64 timestamp = 1;
inline void PeerUserInfoResponse::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PeerUserInfoResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:IMChat.PeerUserInfoResponse.timestamp)
  return timestamp_;
}
inline void PeerUserInfoResponse::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IMChat.PeerUserInfoResponse.timestamp)
}

// optional .IMChat.UserData userInfo = 2;
inline bool PeerUserInfoResponse::has_userinfo() const {
  return !_is_default_instance_ && userinfo_ != NULL;
}
inline void PeerUserInfoResponse::clear_userinfo() {
  if (userinfo_ != NULL) delete userinfo_;
  userinfo_ = NULL;
}
inline const ::IMChat::UserData& PeerUserInfoResponse::userinfo() const {
  // @@protoc_insertion_point(field_get:IMChat.PeerUserInfoResponse.userInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::IMChat::UserData* PeerUserInfoResponse::mutable_userinfo() {
  
  if (userinfo_ == NULL) {
    userinfo_ = new ::IMChat::UserData;
  }
  // @@protoc_insertion_point(field_mutable:IMChat.PeerUserInfoResponse.userInfo)
  return userinfo_;
}
inline ::IMChat::UserData* PeerUserInfoResponse::release_userinfo() {
  
  ::IMChat::UserData* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void PeerUserInfoResponse::set_allocated_userinfo(::IMChat::UserData* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:IMChat.PeerUserInfoResponse.userInfo)
}

// -------------------------------------------------------------------

// PeerAllUserInfoRequest

// optional int64 timestamp = 1;
inline void PeerAllUserInfoRequest::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PeerAllUserInfoRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:IMChat.PeerAllUserInfoRequest.timestamp)
  return timestamp_;
}
inline void PeerAllUserInfoRequest::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IMChat.PeerAllUserInfoRequest.timestamp)
}

// optional string userID = 2;
inline void PeerAllUserInfoRequest::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerAllUserInfoRequest::userid() const {
  // @@protoc_insertion_point(field_get:IMChat.PeerAllUserInfoRequest.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerAllUserInfoRequest::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.PeerAllUserInfoRequest.userID)
}
inline void PeerAllUserInfoRequest::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.PeerAllUserInfoRequest.userID)
}
inline void PeerAllUserInfoRequest::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.PeerAllUserInfoRequest.userID)
}
inline ::std::string* PeerAllUserInfoRequest::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.PeerAllUserInfoRequest.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerAllUserInfoRequest::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerAllUserInfoRequest::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:IMChat.PeerAllUserInfoRequest.userID)
}

// -------------------------------------------------------------------

// PeerAllUserInfoResponse

// optional int64 timestamp = 1;
inline void PeerAllUserInfoResponse::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PeerAllUserInfoResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:IMChat.PeerAllUserInfoResponse.timestamp)
  return timestamp_;
}
inline void PeerAllUserInfoResponse::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IMChat.PeerAllUserInfoResponse.timestamp)
}

// optional int32 friendsCount = 2;
inline void PeerAllUserInfoResponse::clear_friendscount() {
  friendscount_ = 0;
}
inline ::google::protobuf::int32 PeerAllUserInfoResponse::friendscount() const {
  // @@protoc_insertion_point(field_get:IMChat.PeerAllUserInfoResponse.friendsCount)
  return friendscount_;
}
inline void PeerAllUserInfoResponse::set_friendscount(::google::protobuf::int32 value) {
  
  friendscount_ = value;
  // @@protoc_insertion_point(field_set:IMChat.PeerAllUserInfoResponse.friendsCount)
}

// optional string userID = 3;
inline void PeerAllUserInfoResponse::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerAllUserInfoResponse::userid() const {
  // @@protoc_insertion_point(field_get:IMChat.PeerAllUserInfoResponse.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerAllUserInfoResponse::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.PeerAllUserInfoResponse.userID)
}
inline void PeerAllUserInfoResponse::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.PeerAllUserInfoResponse.userID)
}
inline void PeerAllUserInfoResponse::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.PeerAllUserInfoResponse.userID)
}
inline ::std::string* PeerAllUserInfoResponse::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.PeerAllUserInfoResponse.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerAllUserInfoResponse::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerAllUserInfoResponse::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:IMChat.PeerAllUserInfoResponse.userID)
}

// repeated .IMChat.UserData msgData = 4;
inline int PeerAllUserInfoResponse::msgdata_size() const {
  return msgdata_.size();
}
inline void PeerAllUserInfoResponse::clear_msgdata() {
  msgdata_.Clear();
}
inline const ::IMChat::UserData& PeerAllUserInfoResponse::msgdata(int index) const {
  // @@protoc_insertion_point(field_get:IMChat.PeerAllUserInfoResponse.msgData)
  return msgdata_.Get(index);
}
inline ::IMChat::UserData* PeerAllUserInfoResponse::mutable_msgdata(int index) {
  // @@protoc_insertion_point(field_mutable:IMChat.PeerAllUserInfoResponse.msgData)
  return msgdata_.Mutable(index);
}
inline ::IMChat::UserData* PeerAllUserInfoResponse::add_msgdata() {
  // @@protoc_insertion_point(field_add:IMChat.PeerAllUserInfoResponse.msgData)
  return msgdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IMChat::UserData >&
PeerAllUserInfoResponse::msgdata() const {
  // @@protoc_insertion_point(field_list:IMChat.PeerAllUserInfoResponse.msgData)
  return msgdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::IMChat::UserData >*
PeerAllUserInfoResponse::mutable_msgdata() {
  // @@protoc_insertion_point(field_mutable_list:IMChat.PeerAllUserInfoResponse.msgData)
  return &msgdata_;
}

// -------------------------------------------------------------------

// PeerCategoryRequest

// optional int64 timestamp = 1;
inline void PeerCategoryRequest::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PeerCategoryRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:IMChat.PeerCategoryRequest.timestamp)
  return timestamp_;
}
inline void PeerCategoryRequest::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IMChat.PeerCategoryRequest.timestamp)
}

// optional string userID = 2;
inline void PeerCategoryRequest::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerCategoryRequest::userid() const {
  // @@protoc_insertion_point(field_get:IMChat.PeerCategoryRequest.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerCategoryRequest::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.PeerCategoryRequest.userID)
}
inline void PeerCategoryRequest::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.PeerCategoryRequest.userID)
}
inline void PeerCategoryRequest::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.PeerCategoryRequest.userID)
}
inline ::std::string* PeerCategoryRequest::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.PeerCategoryRequest.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerCategoryRequest::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerCategoryRequest::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:IMChat.PeerCategoryRequest.userID)
}

// -------------------------------------------------------------------

// PeerCategoryResponse_idCategory

// optional string categoryId = 1;
inline void PeerCategoryResponse_idCategory::clear_categoryid() {
  categoryid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerCategoryResponse_idCategory::categoryid() const {
  // @@protoc_insertion_point(field_get:IMChat.PeerCategoryResponse.idCategory.categoryId)
  return categoryid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerCategoryResponse_idCategory::set_categoryid(const ::std::string& value) {
  
  categoryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.PeerCategoryResponse.idCategory.categoryId)
}
inline void PeerCategoryResponse_idCategory::set_categoryid(const char* value) {
  
  categoryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.PeerCategoryResponse.idCategory.categoryId)
}
inline void PeerCategoryResponse_idCategory::set_categoryid(const char* value, size_t size) {
  
  categoryid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.PeerCategoryResponse.idCategory.categoryId)
}
inline ::std::string* PeerCategoryResponse_idCategory::mutable_categoryid() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.PeerCategoryResponse.idCategory.categoryId)
  return categoryid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerCategoryResponse_idCategory::release_categoryid() {
  
  return categoryid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerCategoryResponse_idCategory::set_allocated_categoryid(::std::string* categoryid) {
  if (categoryid != NULL) {
    
  } else {
    
  }
  categoryid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), categoryid);
  // @@protoc_insertion_point(field_set_allocated:IMChat.PeerCategoryResponse.idCategory.categoryId)
}

// optional string friendID = 2;
inline void PeerCategoryResponse_idCategory::clear_friendid() {
  friendid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerCategoryResponse_idCategory::friendid() const {
  // @@protoc_insertion_point(field_get:IMChat.PeerCategoryResponse.idCategory.friendID)
  return friendid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerCategoryResponse_idCategory::set_friendid(const ::std::string& value) {
  
  friendid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.PeerCategoryResponse.idCategory.friendID)
}
inline void PeerCategoryResponse_idCategory::set_friendid(const char* value) {
  
  friendid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.PeerCategoryResponse.idCategory.friendID)
}
inline void PeerCategoryResponse_idCategory::set_friendid(const char* value, size_t size) {
  
  friendid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.PeerCategoryResponse.idCategory.friendID)
}
inline ::std::string* PeerCategoryResponse_idCategory::mutable_friendid() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.PeerCategoryResponse.idCategory.friendID)
  return friendid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerCategoryResponse_idCategory::release_friendid() {
  
  return friendid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerCategoryResponse_idCategory::set_allocated_friendid(::std::string* friendid) {
  if (friendid != NULL) {
    
  } else {
    
  }
  friendid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friendid);
  // @@protoc_insertion_point(field_set_allocated:IMChat.PeerCategoryResponse.idCategory.friendID)
}

// -------------------------------------------------------------------

// PeerCategoryResponse

// optional int64 timestamp = 1;
inline void PeerCategoryResponse::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PeerCategoryResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:IMChat.PeerCategoryResponse.timestamp)
  return timestamp_;
}
inline void PeerCategoryResponse::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IMChat.PeerCategoryResponse.timestamp)
}

// optional int32 categoryCount = 2;
inline void PeerCategoryResponse::clear_categorycount() {
  categorycount_ = 0;
}
inline ::google::protobuf::int32 PeerCategoryResponse::categorycount() const {
  // @@protoc_insertion_point(field_get:IMChat.PeerCategoryResponse.categoryCount)
  return categorycount_;
}
inline void PeerCategoryResponse::set_categorycount(::google::protobuf::int32 value) {
  
  categorycount_ = value;
  // @@protoc_insertion_point(field_set:IMChat.PeerCategoryResponse.categoryCount)
}

// optional string userID = 3;
inline void PeerCategoryResponse::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PeerCategoryResponse::userid() const {
  // @@protoc_insertion_point(field_get:IMChat.PeerCategoryResponse.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerCategoryResponse::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.PeerCategoryResponse.userID)
}
inline void PeerCategoryResponse::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.PeerCategoryResponse.userID)
}
inline void PeerCategoryResponse::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.PeerCategoryResponse.userID)
}
inline ::std::string* PeerCategoryResponse::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.PeerCategoryResponse.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PeerCategoryResponse::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PeerCategoryResponse::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:IMChat.PeerCategoryResponse.userID)
}

// repeated .IMChat.PeerCategoryResponse.idCategory msgData = 4;
inline int PeerCategoryResponse::msgdata_size() const {
  return msgdata_.size();
}
inline void PeerCategoryResponse::clear_msgdata() {
  msgdata_.Clear();
}
inline const ::IMChat::PeerCategoryResponse_idCategory& PeerCategoryResponse::msgdata(int index) const {
  // @@protoc_insertion_point(field_get:IMChat.PeerCategoryResponse.msgData)
  return msgdata_.Get(index);
}
inline ::IMChat::PeerCategoryResponse_idCategory* PeerCategoryResponse::mutable_msgdata(int index) {
  // @@protoc_insertion_point(field_mutable:IMChat.PeerCategoryResponse.msgData)
  return msgdata_.Mutable(index);
}
inline ::IMChat::PeerCategoryResponse_idCategory* PeerCategoryResponse::add_msgdata() {
  // @@protoc_insertion_point(field_add:IMChat.PeerCategoryResponse.msgData)
  return msgdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IMChat::PeerCategoryResponse_idCategory >&
PeerCategoryResponse::msgdata() const {
  // @@protoc_insertion_point(field_list:IMChat.PeerCategoryResponse.msgData)
  return msgdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::IMChat::PeerCategoryResponse_idCategory >*
PeerCategoryResponse::mutable_msgdata() {
  // @@protoc_insertion_point(field_mutable_list:IMChat.PeerCategoryResponse.msgData)
  return &msgdata_;
}

// -------------------------------------------------------------------

// GroupAllRequest

// optional int64 timestamp = 1;
inline void GroupAllRequest::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GroupAllRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:IMChat.GroupAllRequest.timestamp)
  return timestamp_;
}
inline void GroupAllRequest::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IMChat.GroupAllRequest.timestamp)
}

// optional string userID = 2;
inline void GroupAllRequest::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupAllRequest::userid() const {
  // @@protoc_insertion_point(field_get:IMChat.GroupAllRequest.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupAllRequest::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.GroupAllRequest.userID)
}
inline void GroupAllRequest::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.GroupAllRequest.userID)
}
inline void GroupAllRequest::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.GroupAllRequest.userID)
}
inline ::std::string* GroupAllRequest::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.GroupAllRequest.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupAllRequest::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupAllRequest::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:IMChat.GroupAllRequest.userID)
}

// -------------------------------------------------------------------

// GroupInfo

// optional string groupID = 2;
inline void GroupInfo::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupInfo::groupid() const {
  // @@protoc_insertion_point(field_get:IMChat.GroupInfo.groupID)
  return groupid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInfo::set_groupid(const ::std::string& value) {
  
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.GroupInfo.groupID)
}
inline void GroupInfo::set_groupid(const char* value) {
  
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.GroupInfo.groupID)
}
inline void GroupInfo::set_groupid(const char* value, size_t size) {
  
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.GroupInfo.groupID)
}
inline ::std::string* GroupInfo::mutable_groupid() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.GroupInfo.groupID)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupInfo::release_groupid() {
  
  return groupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInfo::set_allocated_groupid(::std::string* groupid) {
  if (groupid != NULL) {
    
  } else {
    
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:IMChat.GroupInfo.groupID)
}

// optional string groupName = 3;
inline void GroupInfo::clear_groupname() {
  groupname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupInfo::groupname() const {
  // @@protoc_insertion_point(field_get:IMChat.GroupInfo.groupName)
  return groupname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInfo::set_groupname(const ::std::string& value) {
  
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.GroupInfo.groupName)
}
inline void GroupInfo::set_groupname(const char* value) {
  
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.GroupInfo.groupName)
}
inline void GroupInfo::set_groupname(const char* value, size_t size) {
  
  groupname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.GroupInfo.groupName)
}
inline ::std::string* GroupInfo::mutable_groupname() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.GroupInfo.groupName)
  return groupname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupInfo::release_groupname() {
  
  return groupname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInfo::set_allocated_groupname(::std::string* groupname) {
  if (groupname != NULL) {
    
  } else {
    
  }
  groupname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupname);
  // @@protoc_insertion_point(field_set_allocated:IMChat.GroupInfo.groupName)
}

// optional string image_url = 4;
inline void GroupInfo::clear_image_url() {
  image_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupInfo::image_url() const {
  // @@protoc_insertion_point(field_get:IMChat.GroupInfo.image_url)
  return image_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInfo::set_image_url(const ::std::string& value) {
  
  image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.GroupInfo.image_url)
}
inline void GroupInfo::set_image_url(const char* value) {
  
  image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.GroupInfo.image_url)
}
inline void GroupInfo::set_image_url(const char* value, size_t size) {
  
  image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.GroupInfo.image_url)
}
inline ::std::string* GroupInfo::mutable_image_url() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.GroupInfo.image_url)
  return image_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupInfo::release_image_url() {
  
  return image_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupInfo::set_allocated_image_url(::std::string* image_url) {
  if (image_url != NULL) {
    
  } else {
    
  }
  image_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_url);
  // @@protoc_insertion_point(field_set_allocated:IMChat.GroupInfo.image_url)
}

// -------------------------------------------------------------------

// GroupAllResponse

// optional int64 timestamp = 1;
inline void GroupAllResponse::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GroupAllResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:IMChat.GroupAllResponse.timestamp)
  return timestamp_;
}
inline void GroupAllResponse::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IMChat.GroupAllResponse.timestamp)
}

// optional int32 groupCount = 2;
inline void GroupAllResponse::clear_groupcount() {
  groupcount_ = 0;
}
inline ::google::protobuf::int32 GroupAllResponse::groupcount() const {
  // @@protoc_insertion_point(field_get:IMChat.GroupAllResponse.groupCount)
  return groupcount_;
}
inline void GroupAllResponse::set_groupcount(::google::protobuf::int32 value) {
  
  groupcount_ = value;
  // @@protoc_insertion_point(field_set:IMChat.GroupAllResponse.groupCount)
}

// optional string userID = 3;
inline void GroupAllResponse::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupAllResponse::userid() const {
  // @@protoc_insertion_point(field_get:IMChat.GroupAllResponse.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupAllResponse::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.GroupAllResponse.userID)
}
inline void GroupAllResponse::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.GroupAllResponse.userID)
}
inline void GroupAllResponse::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.GroupAllResponse.userID)
}
inline ::std::string* GroupAllResponse::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.GroupAllResponse.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupAllResponse::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupAllResponse::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:IMChat.GroupAllResponse.userID)
}

// repeated .IMChat.GroupInfo msgData = 4;
inline int GroupAllResponse::msgdata_size() const {
  return msgdata_.size();
}
inline void GroupAllResponse::clear_msgdata() {
  msgdata_.Clear();
}
inline const ::IMChat::GroupInfo& GroupAllResponse::msgdata(int index) const {
  // @@protoc_insertion_point(field_get:IMChat.GroupAllResponse.msgData)
  return msgdata_.Get(index);
}
inline ::IMChat::GroupInfo* GroupAllResponse::mutable_msgdata(int index) {
  // @@protoc_insertion_point(field_mutable:IMChat.GroupAllResponse.msgData)
  return msgdata_.Mutable(index);
}
inline ::IMChat::GroupInfo* GroupAllResponse::add_msgdata() {
  // @@protoc_insertion_point(field_add:IMChat.GroupAllResponse.msgData)
  return msgdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IMChat::GroupInfo >&
GroupAllResponse::msgdata() const {
  // @@protoc_insertion_point(field_list:IMChat.GroupAllResponse.msgData)
  return msgdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::IMChat::GroupInfo >*
GroupAllResponse::mutable_msgdata() {
  // @@protoc_insertion_point(field_mutable_list:IMChat.GroupAllResponse.msgData)
  return &msgdata_;
}

// -------------------------------------------------------------------

// GroupMemberInfo

// optional string userID = 2;
inline void GroupMemberInfo::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupMemberInfo::userid() const {
  // @@protoc_insertion_point(field_get:IMChat.GroupMemberInfo.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMemberInfo::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.GroupMemberInfo.userID)
}
inline void GroupMemberInfo::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.GroupMemberInfo.userID)
}
inline void GroupMemberInfo::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.GroupMemberInfo.userID)
}
inline ::std::string* GroupMemberInfo::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.GroupMemberInfo.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupMemberInfo::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMemberInfo::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:IMChat.GroupMemberInfo.userID)
}

// optional string nick_name = 3;
inline void GroupMemberInfo::clear_nick_name() {
  nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupMemberInfo::nick_name() const {
  // @@protoc_insertion_point(field_get:IMChat.GroupMemberInfo.nick_name)
  return nick_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMemberInfo::set_nick_name(const ::std::string& value) {
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.GroupMemberInfo.nick_name)
}
inline void GroupMemberInfo::set_nick_name(const char* value) {
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.GroupMemberInfo.nick_name)
}
inline void GroupMemberInfo::set_nick_name(const char* value, size_t size) {
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.GroupMemberInfo.nick_name)
}
inline ::std::string* GroupMemberInfo::mutable_nick_name() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.GroupMemberInfo.nick_name)
  return nick_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupMemberInfo::release_nick_name() {
  
  return nick_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMemberInfo::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name != NULL) {
    
  } else {
    
  }
  nick_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick_name);
  // @@protoc_insertion_point(field_set_allocated:IMChat.GroupMemberInfo.nick_name)
}

// optional string image_url = 4;
inline void GroupMemberInfo::clear_image_url() {
  image_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupMemberInfo::image_url() const {
  // @@protoc_insertion_point(field_get:IMChat.GroupMemberInfo.image_url)
  return image_url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMemberInfo::set_image_url(const ::std::string& value) {
  
  image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.GroupMemberInfo.image_url)
}
inline void GroupMemberInfo::set_image_url(const char* value) {
  
  image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.GroupMemberInfo.image_url)
}
inline void GroupMemberInfo::set_image_url(const char* value, size_t size) {
  
  image_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.GroupMemberInfo.image_url)
}
inline ::std::string* GroupMemberInfo::mutable_image_url() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.GroupMemberInfo.image_url)
  return image_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupMemberInfo::release_image_url() {
  
  return image_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMemberInfo::set_allocated_image_url(::std::string* image_url) {
  if (image_url != NULL) {
    
  } else {
    
  }
  image_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_url);
  // @@protoc_insertion_point(field_set_allocated:IMChat.GroupMemberInfo.image_url)
}

// optional int32 online_status = 5;
inline void GroupMemberInfo::clear_online_status() {
  online_status_ = 0;
}
inline ::google::protobuf::int32 GroupMemberInfo::online_status() const {
  // @@protoc_insertion_point(field_get:IMChat.GroupMemberInfo.online_status)
  return online_status_;
}
inline void GroupMemberInfo::set_online_status(::google::protobuf::int32 value) {
  
  online_status_ = value;
  // @@protoc_insertion_point(field_set:IMChat.GroupMemberInfo.online_status)
}

// -------------------------------------------------------------------

// GroupMembeRequest

// optional int64 timestamp = 1;
inline void GroupMembeRequest::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GroupMembeRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:IMChat.GroupMembeRequest.timestamp)
  return timestamp_;
}
inline void GroupMembeRequest::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IMChat.GroupMembeRequest.timestamp)
}

// optional string groupID = 2;
inline void GroupMembeRequest::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupMembeRequest::groupid() const {
  // @@protoc_insertion_point(field_get:IMChat.GroupMembeRequest.groupID)
  return groupid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMembeRequest::set_groupid(const ::std::string& value) {
  
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.GroupMembeRequest.groupID)
}
inline void GroupMembeRequest::set_groupid(const char* value) {
  
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.GroupMembeRequest.groupID)
}
inline void GroupMembeRequest::set_groupid(const char* value, size_t size) {
  
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.GroupMembeRequest.groupID)
}
inline ::std::string* GroupMembeRequest::mutable_groupid() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.GroupMembeRequest.groupID)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupMembeRequest::release_groupid() {
  
  return groupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMembeRequest::set_allocated_groupid(::std::string* groupid) {
  if (groupid != NULL) {
    
  } else {
    
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:IMChat.GroupMembeRequest.groupID)
}

// optional string userID = 3;
inline void GroupMembeRequest::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupMembeRequest::userid() const {
  // @@protoc_insertion_point(field_get:IMChat.GroupMembeRequest.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMembeRequest::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.GroupMembeRequest.userID)
}
inline void GroupMembeRequest::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.GroupMembeRequest.userID)
}
inline void GroupMembeRequest::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.GroupMembeRequest.userID)
}
inline ::std::string* GroupMembeRequest::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.GroupMembeRequest.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupMembeRequest::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMembeRequest::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:IMChat.GroupMembeRequest.userID)
}

// -------------------------------------------------------------------

// GroupMemberResponse

// optional int64 timestamp = 1;
inline void GroupMemberResponse::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GroupMemberResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:IMChat.GroupMemberResponse.timestamp)
  return timestamp_;
}
inline void GroupMemberResponse::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:IMChat.GroupMemberResponse.timestamp)
}

// optional int32 memberCount = 2;
inline void GroupMemberResponse::clear_membercount() {
  membercount_ = 0;
}
inline ::google::protobuf::int32 GroupMemberResponse::membercount() const {
  // @@protoc_insertion_point(field_get:IMChat.GroupMemberResponse.memberCount)
  return membercount_;
}
inline void GroupMemberResponse::set_membercount(::google::protobuf::int32 value) {
  
  membercount_ = value;
  // @@protoc_insertion_point(field_set:IMChat.GroupMemberResponse.memberCount)
}

// optional string userID = 3;
inline void GroupMemberResponse::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupMemberResponse::userid() const {
  // @@protoc_insertion_point(field_get:IMChat.GroupMemberResponse.userID)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMemberResponse::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.GroupMemberResponse.userID)
}
inline void GroupMemberResponse::set_userid(const char* value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.GroupMemberResponse.userID)
}
inline void GroupMemberResponse::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.GroupMemberResponse.userID)
}
inline ::std::string* GroupMemberResponse::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.GroupMemberResponse.userID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupMemberResponse::release_userid() {
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMemberResponse::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:IMChat.GroupMemberResponse.userID)
}

// optional string groupID = 4;
inline void GroupMemberResponse::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GroupMemberResponse::groupid() const {
  // @@protoc_insertion_point(field_get:IMChat.GroupMemberResponse.groupID)
  return groupid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMemberResponse::set_groupid(const ::std::string& value) {
  
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IMChat.GroupMemberResponse.groupID)
}
inline void GroupMemberResponse::set_groupid(const char* value) {
  
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IMChat.GroupMemberResponse.groupID)
}
inline void GroupMemberResponse::set_groupid(const char* value, size_t size) {
  
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IMChat.GroupMemberResponse.groupID)
}
inline ::std::string* GroupMemberResponse::mutable_groupid() {
  
  // @@protoc_insertion_point(field_mutable:IMChat.GroupMemberResponse.groupID)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupMemberResponse::release_groupid() {
  
  return groupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupMemberResponse::set_allocated_groupid(::std::string* groupid) {
  if (groupid != NULL) {
    
  } else {
    
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:IMChat.GroupMemberResponse.groupID)
}

// repeated .IMChat.GroupMemberInfo msgData = 5;
inline int GroupMemberResponse::msgdata_size() const {
  return msgdata_.size();
}
inline void GroupMemberResponse::clear_msgdata() {
  msgdata_.Clear();
}
inline const ::IMChat::GroupMemberInfo& GroupMemberResponse::msgdata(int index) const {
  // @@protoc_insertion_point(field_get:IMChat.GroupMemberResponse.msgData)
  return msgdata_.Get(index);
}
inline ::IMChat::GroupMemberInfo* GroupMemberResponse::mutable_msgdata(int index) {
  // @@protoc_insertion_point(field_mutable:IMChat.GroupMemberResponse.msgData)
  return msgdata_.Mutable(index);
}
inline ::IMChat::GroupMemberInfo* GroupMemberResponse::add_msgdata() {
  // @@protoc_insertion_point(field_add:IMChat.GroupMemberResponse.msgData)
  return msgdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::IMChat::GroupMemberInfo >&
GroupMemberResponse::msgdata() const {
  // @@protoc_insertion_point(field_list:IMChat.GroupMemberResponse.msgData)
  return msgdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::IMChat::GroupMemberInfo >*
GroupMemberResponse::mutable_msgdata() {
  // @@protoc_insertion_point(field_mutable_list:IMChat.GroupMemberResponse.msgData)
  return &msgdata_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace IMChat

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::IMChat::MsgData_MSGTYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::IMChat::MsgData_MSGTYPE>() {
  return ::IMChat::MsgData_MSGTYPE_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageChat_2eproto__INCLUDED
