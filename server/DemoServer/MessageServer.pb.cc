// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageServer.proto

#include "stdafx.h"
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace IMServer {

namespace {

const ::google::protobuf::Descriptor* serverGroupMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  serverGroupMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageServer_2eproto() {
  protobuf_AddDesc_MessageServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageServer.proto");
  GOOGLE_CHECK(file != NULL);
  serverGroupMsg_descriptor_ = file->message_type(0);
  static const int serverGroupMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serverGroupMsg, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serverGroupMsg, msgdata_),
  };
  serverGroupMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      serverGroupMsg_descriptor_,
      serverGroupMsg::default_instance_,
      serverGroupMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(serverGroupMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serverGroupMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(serverGroupMsg, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      serverGroupMsg_descriptor_, &serverGroupMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageServer_2eproto() {
  delete serverGroupMsg::default_instance_;
  delete serverGroupMsg_reflection_;
}

void protobuf_AddDesc_MessageServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023MessageServer.proto\022\010IMServer\"1\n\016serve"
    "rGroupMsg\022\016\n\006userId\030\001 \003(\t\022\017\n\007msgData\030\002 \001"
    "(\014b\006proto3", 90);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageServer.proto", &protobuf_RegisterTypes);
  serverGroupMsg::default_instance_ = new serverGroupMsg();
  serverGroupMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageServer_2eproto {
  StaticDescriptorInitializer_MessageServer_2eproto() {
    protobuf_AddDesc_MessageServer_2eproto();
  }
} static_descriptor_initializer_MessageServer_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int serverGroupMsg::kUserIdFieldNumber;
const int serverGroupMsg::kMsgDataFieldNumber;
#endif  // !_MSC_VER

serverGroupMsg::serverGroupMsg()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IMServer.serverGroupMsg)
}

void serverGroupMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

serverGroupMsg::serverGroupMsg(const serverGroupMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IMServer.serverGroupMsg)
}

void serverGroupMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

serverGroupMsg::~serverGroupMsg() {
  // @@protoc_insertion_point(destructor:IMServer.serverGroupMsg)
  SharedDtor();
}

void serverGroupMsg::SharedDtor() {
  msgdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void serverGroupMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* serverGroupMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return serverGroupMsg_descriptor_;
}

const serverGroupMsg& serverGroupMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageServer_2eproto();
  return *default_instance_;
}

serverGroupMsg* serverGroupMsg::default_instance_ = NULL;

serverGroupMsg* serverGroupMsg::New(::google::protobuf::Arena* arena) const {
  serverGroupMsg* n = new serverGroupMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void serverGroupMsg::Clear() {
  msgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.Clear();
}

bool serverGroupMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IMServer.serverGroupMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string userId = 1;
      case 1: {
        if (tag == 10) {
         parse_userId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid(this->userid_size() - 1).data(),
            this->userid(this->userid_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "IMServer.serverGroupMsg.userId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_userId;
        if (input->ExpectTag(18)) goto parse_msgData;
        break;
      }

      // optional bytes msgData = 2;
      case 2: {
        if (tag == 18) {
         parse_msgData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msgdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IMServer.serverGroupMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IMServer.serverGroupMsg)
  return false;
#undef DO_
}

void serverGroupMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IMServer.serverGroupMsg)
  // repeated string userId = 1;
  for (int i = 0; i < this->userid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->userid(i).data(), this->userid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "IMServer.serverGroupMsg.userId");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(i), output);
  }

  // optional bytes msgData = 2;
  if (this->msgdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->msgdata(), output);
  }

  // @@protoc_insertion_point(serialize_end:IMServer.serverGroupMsg)
}

::google::protobuf::uint8* serverGroupMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IMServer.serverGroupMsg)
  // repeated string userId = 1;
  for (int i = 0; i < this->userid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid(i).data(), this->userid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "IMServer.serverGroupMsg.userId");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->userid(i), target);
  }

  // optional bytes msgData = 2;
  if (this->msgdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msgdata(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IMServer.serverGroupMsg)
  return target;
}

int serverGroupMsg::ByteSize() const {
  int total_size = 0;

  // optional bytes msgData = 2;
  if (this->msgdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msgdata());
  }

  // repeated string userId = 1;
  total_size += 1 * this->userid_size();
  for (int i = 0; i < this->userid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->userid(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void serverGroupMsg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const serverGroupMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const serverGroupMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void serverGroupMsg::MergeFrom(const serverGroupMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  userid_.MergeFrom(from.userid_);
  if (from.msgdata().size() > 0) {

    msgdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgdata_);
  }
}

void serverGroupMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void serverGroupMsg::CopyFrom(const serverGroupMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool serverGroupMsg::IsInitialized() const {

  return true;
}

void serverGroupMsg::Swap(serverGroupMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void serverGroupMsg::InternalSwap(serverGroupMsg* other) {
  userid_.UnsafeArenaSwap(&other->userid_);
  msgdata_.Swap(&other->msgdata_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata serverGroupMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = serverGroupMsg_descriptor_;
  metadata.reflection = serverGroupMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace IMServer

// @@protoc_insertion_point(global_scope)
